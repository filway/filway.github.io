import{g as e,f as a,G as l}from"./common-bec3f312.js";const n='{"title":"lerna简介","frontmatter":{"date":"2022-04-03","title":"lerna简介","tags":["前端架构师","week2","脚手架"],"describe":null},"headers":[{"level":2,"title":"原生脚手架开发痛点分析","slug":"原生脚手架开发痛点分析"},{"level":2,"title":"Lerna 简介","slug":"lerna-简介"},{"level":3,"title":"优势","slug":"优势"},{"level":3,"title":"官网","slug":"官网"},{"level":3,"title":"案例","slug":"案例"},{"level":3,"title":"lerna 开发脚手架流程（划重点）","slug":"lerna-开发脚手架流程（划重点）"},{"level":2,"title":"基于 Lerna 创建项目","slug":"基于-lerna-创建项目"},{"level":2,"title":"Lerna 使用细节（划重点）","slug":"lerna-使用细节（划重点）"}],"relativePath":"docs/Front_arch/week2/05.md","lastUpdated":1660147426752.5005}';var o={};const s=l('<h2 id="原生脚手架开发痛点分析"><a class="header-anchor" href="#原生脚手架开发痛点分析" aria-hidden="true">#</a> 原生脚手架开发痛点分析</h2><ul><li>痛点一：重复操作 <ul><li>多 Package 本地 link</li><li>多 Package 依赖安装</li><li>多 Package 单元测试</li><li>多 Package 代码提交</li><li>多 Package 代码发布</li></ul></li><li>痛点二：版本一致性 <ul><li>发布时版本一致性</li><li>发布后相互依赖版本升级</li></ul></li></ul><blockquote><p>package 越多，管理复杂度越高</p></blockquote><h2 id="lerna-简介"><a class="header-anchor" href="#lerna-简介" aria-hidden="true">#</a> Lerna 简介</h2><blockquote><p>Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.</p></blockquote><p>Lerna 是一个优化基于 git+npm 的多 package 项目的管理工具</p><h3 id="优势"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h3><ul><li>大幅减少重复操作</li><li>提升操作的标准化</li></ul><blockquote><p>Lerna 是架构优化的产物，它揭示了一个架构真理：项目复杂度提升后，就需要对项目进行架构优化。架构优化的主要目标往往都是以效能为核心。</p></blockquote><h3 id="官网"><a class="header-anchor" href="#官网" aria-hidden="true">#</a> 官网</h3><p>官网：<a href="https://lerna.js.org/" target="_blank" rel="noopener noreferrer">https://lerna.js.org/</a></p><h3 id="案例"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><p>使用 Lerna 管理的大型项目：</p><ul><li>babel: <a href="https://github.com/babel/babel" target="_blank" rel="noopener noreferrer">https://github.com/babel/babel</a></li><li>vue-cli: <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/vue-cli</a></li><li>create-react-app: <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener noreferrer">https://github.com/facebook/create-react-app</a></li></ul><h3 id="lerna-开发脚手架流程（划重点）"><a class="header-anchor" href="#lerna-开发脚手架流程（划重点）" aria-hidden="true">#</a> lerna 开发脚手架流程（划重点）</h3><p><img src="https://oss.filway.cn/filway-blog/5fda20d609a8a01307221197.jpg" alt="图片描述"></p><h2 id="基于-lerna-创建项目"><a class="header-anchor" href="#基于-lerna-创建项目" aria-hidden="true">#</a> 基于 Lerna 创建项目</h2><p>安装 Lerna</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> -g lerna\n</code></pre></div><p>创建项目</p><div class="language-bash"><pre><code><span class="token function">git</span> init imooc-cli-test <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> imooc-cli-test\n</code></pre></div><p>初始化 Lerna 项目</p><div class="language-bash"><pre><code>lerna init\n</code></pre></div><p>创建 Package</p><div class="language-bash"><pre><code>lerna create @imooc-cli/core packages\n</code></pre></div><p>安装依赖</p><div class="language-bash"><pre><code>lerna <span class="token function">add</span> mocha packages/core --dev\n</code></pre></div><p>删除依赖</p><div class="language-bash"><pre><code>lerna clean\n</code></pre></div><p>安装依赖</p><div class="language-bash"><pre><code>lerna bootstrap\n</code></pre></div><p>执行单元测试</p><div class="language-bash"><pre><code>lerna run <span class="token builtin class-name">test</span>\n</code></pre></div><p>执行特定包的单元测试</p><div class="language-bash"><pre><code>lerna run <span class="token builtin class-name">test</span> @imooc-cli-test/core\n</code></pre></div><p>link 项目</p><div class="language-bash"><pre><code>lerna <span class="token function">link</span>\n</code></pre></div><p>发布项目</p><div class="language-bash"><pre><code>lerna publish\n</code></pre></div><h2 id="lerna-使用细节（划重点）"><a class="header-anchor" href="#lerna-使用细节（划重点）" aria-hidden="true">#</a> Lerna 使用细节（划重点）</h2><ul><li><div class="language-"><pre><code>lerna init\n</code></pre></div><ul><li>会自动完成 git 初始化，但不会创建 <code>.gitignore</code>，这个必须要手动添加，否则会将 <code>node_modules</code> 目录都上传到 git，如果 <code>node_modules</code> 已经加入 git stage，可使用：</li></ul></li></ul><div class="language-bash"><pre><code><span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\n</code></pre></div><p>执行 unstage 操作，如果文件已经被 git 监听到变更，可使用：</p><div class="language-bash"><pre><code><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span>\n</code></pre></div><p>将变更作废，记得在执行操作之前将文件加入 <code>.gitignore</code></p><ul><li><div class="language-"><pre><code>lerna add\n</code></pre></div><p>：</p><ul><li>第一个参数：添加 npm 包名</li><li>第二个参数：本地 package 的路径</li><li>选项： <ul><li><code>--dev</code>：将依赖安装到 <code>devDependencies</code>，不加时安装到 <code>dependencies</code></li></ul></li></ul></li></ul><div class="language-bash"><pre><code>lerna <span class="token function">add</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token punctuation">[</span>loc<span class="token punctuation">]</span> --dev\n</code></pre></div><ul><li><code>lerna link</code>： <ul><li>如果未发布上线，需要手动将依赖添加到 <code>package.json</code> 再执行 <code>lerna link</code></li></ul></li><li><code>lerna clean</code>： <ul><li>只会删除 <code>node_modules</code>，不会删除 <code>package.json</code> 中的依赖</li></ul></li><li><code>lerna exec</code> 和 <code>lerna run</code>： <ul><li><code>--scope</code> 属性后添加的是包名，而不是 package 的路径，这点和 <code>lerna add</code> 用法不同</li></ul></li><li><code>lerna publish</code>： <ul><li>发布时会自动执行：<code>git add package-lock.json</code>，所以 <code>package-lock.json</code> 不要加入 <code>.gitignore</code></li><li>先创建远程仓库，并且同步一次 master 分支</li><li>执行 <code>lerna publish</code> 前先完成 <code>npm login</code></li><li>如果发布的 npm 包名为：<code>@xxx/yyy</code> 的格式，需要先在 npm 注册名为：xxx 的 organization，否则可能会提交不成功</li><li>发布到 npm group 时默认为 private，所以我们需要手动在 <code>package.json</code> 中添加如下配置：</li></ul></li></ul><div class="language-json"><pre><code><span class="token property">&quot;publishConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;access&quot;</span><span class="token operator">:</span> <span class="token string">&quot;public&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',49);o.render=function(l,n,o,c,i,r){return a(),e("div",null,[s])};export default o;export{n as __pageData};
