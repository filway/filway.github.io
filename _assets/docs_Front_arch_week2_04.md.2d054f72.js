import{g as n,f as s,G as a}from"./common-bec3f312.js";const e='{"title":"脚手架的开发流程","frontmatter":{"date":"2022-04-03","title":"脚手架的开发流程","tags":["前端架构师","week2","脚手架"],"describe":null},"headers":[{"level":2,"title":"脚手架开发流程详解","slug":"脚手架开发流程详解"},{"level":3,"title":"开发流程","slug":"开发流程"},{"level":3,"title":"使用流程","slug":"使用流程"},{"level":2,"title":"脚手架开发难点解析","slug":"脚手架开发难点解析"},{"level":2,"title":"脚手架本地link标准流程","slug":"脚手架本地link标准流程"}],"relativePath":"docs/Front_arch/week2/04.md","lastUpdated":1660147426752.5005}';var o={};const t=a('<h2 id="脚手架开发流程详解"><a class="header-anchor" href="#脚手架开发流程详解" aria-hidden="true">#</a> 脚手架开发流程详解</h2><h3 id="开发流程"><a class="header-anchor" href="#开发流程" aria-hidden="true">#</a> 开发流程</h3><ul><li>创建 <code>npm</code> 项目</li><li>创建脚手架入口文件，最上方添加：</li></ul><div class="language-bash"><pre><code><span class="token shebang important">#!/usr/bin/env node</span>\n</code></pre></div><ul><li>配置 <code>package.json</code>，添加 <code>bin</code> 属性</li><li>编写脚手架代码</li><li>将脚手架发布到 <code>npm</code></li></ul><h3 id="使用流程"><a class="header-anchor" href="#使用流程" aria-hidden="true">#</a> 使用流程</h3><ul><li>安装脚手架</li></ul><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> -g your-own-cli\n</code></pre></div><ul><li>使用脚手架</li></ul><div class="language-bash"><pre><code>your-own-cli\n</code></pre></div><h2 id="脚手架开发难点解析"><a class="header-anchor" href="#脚手架开发难点解析" aria-hidden="true">#</a> 脚手架开发难点解析</h2><ul><li>分包：将复杂的系统拆分成若干个模块</li><li>命令注册：</li></ul><div class="language-bash"><pre><code>vue create\nvue <span class="token function">add</span>\nvue invoke\n</code></pre></div><ul><li>参数解析： <ul><li>options全称：<code>--version</code>、<code>--help</code></li><li>options简写：<code>-V</code>、<code>-h</code></li><li>带params的options：<code>--path /Users/sam/Desktop/vue-test</code></li></ul></li></ul><p>示例：</p><div class="language-bash"><pre><code>vue <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>params<span class="token operator">&gt;</span>\n</code></pre></div><ul><li>帮助文档： <ul><li>global help <ul><li>Usage</li><li>Options</li><li>Commands</li></ul></li></ul></li></ul><p>示例：<code>vue</code> 的帮助信息：</p><div class="language-bash"><pre><code>Usage: vue <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span>\n\nOptions:\n  -V, --version                              output the version number\n  -h, --help                                 output usage information\n\nCommands:\n  create <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>app-name<span class="token operator">&gt;</span>                create a new project powered by vue-cli-service\n  <span class="token function">add</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>plugin<span class="token operator">&gt;</span> <span class="token punctuation">[</span>pluginOptions<span class="token punctuation">]</span>     <span class="token function">install</span> a plugin and invoke its generator <span class="token keyword">in</span> an already created project\n  invoke <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>plugin<span class="token operator">&gt;</span> <span class="token punctuation">[</span>pluginOptions<span class="token punctuation">]</span>  invoke the generator of a plugin <span class="token keyword">in</span> an already created project\n  inspect <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>paths<span class="token punctuation">..</span>.<span class="token punctuation">]</span>               inspect the webpack config <span class="token keyword">in</span> a project with vue-cli-service\n  serve <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>entry<span class="token punctuation">]</span>                    serve a .js or .vue <span class="token function">file</span> <span class="token keyword">in</span> development mode with zero config\n  build <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>entry<span class="token punctuation">]</span>                    build a .js or .vue <span class="token function">file</span> <span class="token keyword">in</span> production mode with zero config\n  ui <span class="token punctuation">[</span>options<span class="token punctuation">]</span>                               start and <span class="token function">open</span> the vue-cli ui\n  init <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>template<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>app-name<span class="token operator">&gt;</span>       generate a project from a remote template <span class="token punctuation">(</span>legacy API, requires @vue/cli-init<span class="token punctuation">)</span>\n  config <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>                   inspect and modify the config\n  outdated <span class="token punctuation">[</span>options<span class="token punctuation">]</span>                         <span class="token punctuation">(</span>experimental<span class="token punctuation">)</span> check <span class="token keyword">for</span> outdated vue cli <span class="token function">service</span> / plugins\n  upgrade <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>plugin-name<span class="token punctuation">]</span>            <span class="token punctuation">(</span>experimental<span class="token punctuation">)</span> upgrade vue cli <span class="token function">service</span> / plugins\n  migrate <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>plugin-name<span class="token punctuation">]</span>            <span class="token punctuation">(</span>experimental<span class="token punctuation">)</span> run migrator <span class="token keyword">for</span> an already-installed cli plugin\n  info                                       print debugging information about your environment\n\n  Run vue <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> --help <span class="token keyword">for</span> detailed usage of given command.\n</code></pre></div><ul><li>command help <ul><li>Usage</li><li>Options</li></ul></li></ul><p><code>vue create</code> 的帮助信息：</p><div class="language-bash"><pre><code>Usage: create <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>app-name<span class="token operator">&gt;</span>\n\ncreate a new project powered by vue-cli-service\n\nOptions:\n  -p, --preset <span class="token operator">&lt;</span>presetName<span class="token operator">&gt;</span>       Skip prompts and use saved or remote preset\n  -d, --default                   Skip prompts and use default preset\n  -i, --inlinePreset <span class="token operator">&lt;</span>json<span class="token operator">&gt;</span>       Skip prompts and use inline JSON string as preset\n  -m, --packageManager <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>  Use specified <span class="token function">npm</span> client when installing dependencies\n  -r, --registry <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>            Use specified <span class="token function">npm</span> registry when installing dependencies <span class="token punctuation">(</span>only <span class="token keyword">for</span> <span class="token function">npm</span><span class="token punctuation">)</span>\n  -g, --git <span class="token punctuation">[</span>message<span class="token punctuation">]</span>             Force <span class="token function">git</span> initialization with initial commit message\n  -n, --no-git                    Skip <span class="token function">git</span> initialization\n  -f, --force                     Overwrite target directory <span class="token keyword">if</span> it exists\n  --merge                         Merge target directory <span class="token keyword">if</span> it exists\n  -c, --clone                     Use <span class="token function">git</span> clone when fetching remote preset\n  -x, --proxy <span class="token operator">&lt;</span>proxyUrl<span class="token operator">&gt;</span>          Use specified proxy when creating project\n  -b, --bare                      Scaffold project without beginner instructions\n  --skipGetStarted                Skip displaying <span class="token string">&quot;Get started&quot;</span> instructions\n  -h, --help                      output usage information\n</code></pre></div><p>还有很多，比如：</p><ul><li>命令行交互</li><li>日志打印</li><li>命令行文字变色</li><li>网络通信：HTTP/WebSocket</li><li>文件处理</li></ul><p>等等……</p><h2 id="脚手架本地link标准流程"><a class="header-anchor" href="#脚手架本地link标准流程" aria-hidden="true">#</a> 脚手架本地link标准流程</h2><p>链接本地脚手架：</p><div class="language-bash"><pre><code><span class="token builtin class-name">cd</span> your-cli-dir\n<span class="token function">npm</span> <span class="token function">link</span>\n</code></pre></div><p>链接本地库文件：</p><div class="language-bash"><pre><code><span class="token builtin class-name">cd</span> your-lib-dir\n<span class="token function">npm</span> <span class="token function">link</span>\n<span class="token builtin class-name">cd</span> your-cli-dir\n<span class="token function">npm</span> <span class="token function">link</span> your-lib\n</code></pre></div><p>取消链接本地库文件：</p><div class="language-bash"><pre><code><span class="token builtin class-name">cd</span> your-lib-dir\n<span class="token function">npm</span> unlink\n<span class="token builtin class-name">cd</span> your-cli-dir\n<span class="token comment"># link存在</span>\n<span class="token function">npm</span> unlink your-lib\n<span class="token comment"># link不存在</span>\n<span class="token function">rm</span> -rf node_modules\n<span class="token function">npm</span> <span class="token function">install</span> -S your-lib\n</code></pre></div><p>理解 <code>npm link</code>：</p><ul><li><code>npm link your-lib</code>：将当前项目中 <code>node_modules</code> 下指定的库文件链接到 <code>node</code> 全局 <code>node_modules</code> 下的库文件</li><li><code>npm link</code>：将当前项目链接到 <code>node</code> 全局 <code>node_modules</code> 中作为一个库文件，并解析 <code>bin</code> 配置创建可执行文件</li></ul><p>理解 <code>npm unlink</code>：</p><ul><li><code>npm unlink</code>：将当前项目从 <code>node</code> 全局 <code>node_modules</code> 中移除</li><li><code>npm unlink your-lib</code>：将当前项目中的库文件依赖移除</li></ul>',36);o.render=function(a,e,o,p,i,l){return s(),n("div",null,[t])};export default o;export{e as __pageData};
