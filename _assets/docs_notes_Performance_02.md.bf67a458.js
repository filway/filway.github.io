import{g as e,f as l,G as r}from"./common-bec3f312.js";const i='{"title":"使用Vue Cli编译生产环境代码以及创建不同模式","frontmatter":{"date":"2022-08-09","title":"使用Vue Cli编译生产环境代码以及创建不同模式","tags":["vue-cli","webpack","nginx","项目优化"],"describe":"优化的手段的本质就是 减少代码体积 加快响应速度"},"headers":[{"level":2,"title":"为生产环境构建代码","slug":"为生产环境构建代码"},{"level":3,"title":"各种框架对不同环境的天生适配","slug":"各种框架对不同环境的天生适配"},{"level":3,"title":"Vue Cli 提供的内置的 build 命令","slug":"vue-cli-提供的内置的-build-命令"},{"level":3,"title":"Vue Cli 的模式","slug":"vue-cli-的模式"}],"relativePath":"docs/notes/Performance/02.md","lastUpdated":1660147426756.5005}';var t={};const n=r('<h2 id="为生产环境构建代码"><a class="header-anchor" href="#为生产环境构建代码" aria-hidden="true">#</a> 为生产环境构建代码</h2><h4 id="应用部署的流程"><a class="header-anchor" href="#应用部署的流程" aria-hidden="true">#</a> 应用部署的流程</h4><ul><li><strong>构建</strong> Javascript 语言本身是不需要编译的。 但是现代的前端项目使用的语言和或者的模块系统都无法在浏览器中使用，都需要使用特定的 bundler 将源代码最终转换为浏览器支持的 Javascript 代码。</li><li><strong>不同的环境</strong><ul><li>生产环境 （production）</li><li>开发环境 （development）</li><li>测试环境（test 或者 staging）</li></ul></li><li>生产和开发环境的 <strong>区别</strong></li><li>开发环境 <ul><li>会添加丰富的错误提示</li><li>可以使用 mock server 或者本地后端环境</li><li>添加各种便利的功能 - 比如 hot reload，自动刷新</li><li>不太关心静态资源的大小，最好提供最丰富的调试信息 （sourcemap） 等。</li></ul></li><li>生产环境 <ul><li><strong>稳定</strong>是最重要的原则</li><li><strong>速度</strong>是第一要务</li></ul></li><li>生产环境和测试环境的区别 <ul><li>高度相似</li><li>使用的后端服务不一样</li></ul></li></ul><h3 id="各种框架对不同环境的天生适配"><a class="header-anchor" href="#各种框架对不同环境的天生适配" aria-hidden="true">#</a> 各种框架对不同环境的天生适配</h3><ul><li>Vue <ul><li><a href="https://cn.vuejs.org/v2/guide/deployment.html" target="_blank" rel="noopener noreferrer">https://cn.vuejs.org/v2/guide/deployment.html</a></li><li><a href="https://cn.vuejs.org/v2/guide/installation.html#%E7%9B%B4%E6%8E%A5%E7%94%A8-lt-script-gt-%E5%BC%95%E5%85%A5" target="_blank" rel="noopener noreferrer">https://cn.vuejs.org/v2/guide/installation.html#直接用-lt-script-gt-引入</a></li><li>vue-cli 天生支持不同命令采用不同版本的 vue</li></ul></li><li>React <ul><li><a href="https://zh-hans.reactjs.org/docs/optimizing-performance.html" target="_blank" rel="noopener noreferrer">https://zh-hans.reactjs.org/docs/optimizing-performance.html</a></li><li>异曲同工，create-react-app 也支持不同命令采用不同版本的 React</li></ul></li></ul><h3 id="vue-cli-提供的内置的-build-命令"><a class="header-anchor" href="#vue-cli-提供的内置的-build-命令" aria-hidden="true">#</a> Vue Cli 提供的内置的 build 命令</h3><p>文档地址：<a href="https://cli.vuejs.org/zh/guide/cli-service.html#vue-cli-service-build" target="_blank" rel="noopener noreferrer">https://cli.vuejs.org/zh/guide/cli-service.html#vue-cli-service-build</a></p><div class="language-shell"><pre><code>// 查看所有命令\nnpx vue-cli-service <span class="token builtin class-name">help</span>\n// 查看具体一个命令的选项\nnpx vue-cli-service <span class="token builtin class-name">help</span> build\n</code></pre></div><h3 id="vue-cli-的模式"><a class="header-anchor" href="#vue-cli-的模式" aria-hidden="true">#</a> Vue Cli 的模式</h3><p>文档地址：<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">https://cli.vuejs.org/zh/guide/mode-and-env.html#模式</a></p><ul><li>development 模式用于 vue-cli-service serve</li><li>test 模式用于 vue-cli-service test:unit</li><li>production 模式用于 vue-cli-service build</li></ul><p><strong>模式</strong>将决定您的应用运行的模式，是开发，生产还是测试，因此也决定了创建哪种对不同环境优化过的 webpack 配置。</p><p>test 模式，Vue CLI 会创建一个优化过后的，并且旨在用于单元测试的 webpack 配置，它并不会处理图片以及一些对单元测试非必需的其他资源。</p><p>development 模式 会创建一个 webpack 配置，该配置启用热更新，不会对资源进行 hash 也不会打出 vendor bundles，目的是为了在开发的时候能够快速重新构建。</p><ul><li>当运行 vue-cli-service 的时候，它会根据不同的命令，设置对应的模式，模式对应的是一个<strong>环境变量</strong>，它是一个 Nodejs 项目中通用的值，称之为 <strong>NODE_ENV</strong></li></ul><p>在运行命令的时候设置环境变量的工具：<strong>cross-env</strong> 文档地址：<a href="https://github.com/kentcdodds/cross-env" target="_blank" rel="noopener noreferrer">https://github.com/kentcdodds/cross-env</a></p><h4 id="环境变量文件"><a class="header-anchor" href="#环境变量文件" aria-hidden="true">#</a> 环境变量文件</h4><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F" target="_blank" rel="noopener noreferrer">https://cli.vuejs.org/zh/guide/mode-and-env.html#环境变量</a> 在你的项目根目录中放置下列文件来指定环境变量</p><div class="language-"><pre><code>.env                # 在所有的环境中被载入\n.env.local          # 在所有的环境中被载入，但会被 git 忽略\n.env.[mode]         # 只在指定的模式中被载入\n.env.[mode].local   # 只在指定的模式中被载入，但会被 git 忽略\n</code></pre></div><p><strong>一个环境文件只包含环境变量的“键=值”对：</strong></p><div class="language-"><pre><code>FOO=bar\nVUE_APP_NOT_SECRET_CODE=some_value\n</code></pre></div><p><strong>不要在你的应用程序中存储任何机密信息（例如私有 API 密钥）！</strong></p><p><strong>环境变量的优先级</strong> cross-env &gt; .env.[mode] &gt; 运行时默认的 mode</p><p><strong>源代码到浏览器运行的过程</strong> 编译阶段（webpack） -&gt; 浏览器运行（客户端）</p><p>（所有的环境变量都可用）-&gt; (只有特殊的环境变量可用，使用特殊的变量名称)</p><p><strong>在客户端使用环境变量</strong></p><ul><li>VUE_APP_ 开头的变量</li><li>NODE_ENV ： 当前使用的模式</li><li>BASE_URL ： 部署到的基础路径</li></ul><p><strong>运行方式</strong></p><p>在构建过程中，<strong>process.env.VUE_APP_</strong> 开头的变量 都将会被相应的值所取代。在 VUE_APP_Foo=foo 的情况下，它会被替换为 “foo”。</p><p>它的底层是使用 webpack 的 definePlugin 来完成向编译后的代码注入环境变量的任务的，后面介绍插件的时候会说到，文档地址：<a href="https://webpack.js.org/plugins/define-plugin/" target="_blank" rel="noopener noreferrer">https://webpack.js.org/plugins/define-plugin/</a></p>',30);t.render=function(r,i,t,s,a,o){return l(),e("div",null,[n])};export default t;export{i as __pageData};
