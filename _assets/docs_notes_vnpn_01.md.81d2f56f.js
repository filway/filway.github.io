import{g as n,f as s,G as a}from"./common-bec3f312.js";const t='{"title":"varlet源码复盘","frontmatter":{"date":"2022-05-03","title":"varlet源码复盘","tags":["源码解析","备忘"],"describe":"varlet源码复盘"},"headers":[{"level":3,"title":"所使用到的npm包盘点","slug":"所使用到的npm包盘点"},{"level":3,"title":"javascript相关盘点","slug":"javascript相关盘点"},{"level":2,"title":"nodejs相关源码盘点","slug":"nodejs相关源码盘点"},{"level":2,"title":"其他","slug":"其他"}],"relativePath":"docs/notes/vnpn/01.md","lastUpdated":1660147426760.5005}';var p={};const e=a('<h3 id="所使用到的npm包盘点"><a class="header-anchor" href="#所使用到的npm包盘点" aria-hidden="true">#</a> 所使用到的npm包盘点</h3><ul><li><p>fs-extra</p><ul><li><p>outputFileSync和writeFileSync基本相同，除了当父目录不存在的时候会自动创建, file必须是文件路径</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs-extra&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token string">&#39;/tmp/this/path/does/not/exist/file.txt&#39;</span>\nfs<span class="token punctuation">.</span><span class="token function">outputFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&#39;hello!&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// =&gt; hello!</span>\n</code></pre></div></li><li><p>removeSync, 删除文件或者目录,如果目录为空则什么事情都不做</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs-extra&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// remove file</span>\nfs<span class="token punctuation">.</span><span class="token function">removeSync</span><span class="token punctuation">(</span><span class="token string">&#39;/tmp/myfile&#39;</span><span class="token punctuation">)</span>\n\nfs<span class="token punctuation">.</span><span class="token function">removeSync</span><span class="token punctuation">(</span><span class="token string">&#39;/home/jprichardson&#39;</span><span class="token punctuation">)</span> <span class="token comment">// I just deleted my entire HOME directory.</span>\n</code></pre></div></li><li><p>readdirSync, 同步读取目录内容</p></li></ul></li><li><p>lodash</p><ul><li><p>merge</p><p>该方法类似<a href="https://www.lodashjs.com/docs/lodash.merge#assign" target="_blank" rel="noopener noreferrer"><code>_.assign</code></a>， 除了它递归合并 <code>sources</code> 来源对象自身和继承的可枚举属性到 <code>object</code> 目标对象。如果目标值存在，被解析为<code>undefined</code>的<code>sources</code> 来源对象属性将被跳过。数组和普通对象会递归合并，其他对象和值会被直接分配覆盖。源对象从从左到右分配。后续的来源对象属性会覆盖之前分配的属性。</p><p><strong>Note:</strong> 这方法会改变对象 <code>object</code>.</p><div class="language-js"><pre><code><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;a&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">&#39;b&#39;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&#39;d&#39;</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token keyword">var</span> other <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;a&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">&#39;c&#39;</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&#39;e&#39;</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n_<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; { &#39;a&#39;: [{ &#39;b&#39;: 2, &#39;c&#39;: 3 }, { &#39;d&#39;: 4, &#39;e&#39;: 5 }] }</span>\n</code></pre></div></li></ul></li><li><p>webfoot</p><ul><li>从 SVG 图标生成字体。<a href="https://github.com/itgalaxy/webfont" target="_blank" rel="noopener noreferrer">https://github.com/itgalaxy/webfont</a></li></ul></li><li><p>execa <a href="https://www.npmjs.com/package/execa" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/execa</a></p></li><li><p>@vue/compiler-sfc <a href="https://www.npmjs.com/package/@vue/compiler-sfc" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/@vue/compiler-sfc</a></p></li></ul><h3 id="javascript相关盘点"><a class="header-anchor" href="#javascript相关盘点" aria-hidden="true">#</a> javascript相关盘点</h3><ul><li><p>json</p><ul><li><p>JSON.stringify</p><div class="language-javascript"><pre><code><span class="token comment">// 加上2确保写入文件的时候，json不会压缩在一起</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>mergedConfig<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul></li><li><p>Array.filter(Boolean) 过滤掉false的元素 (空字符串, 0 , false)</p></li></ul><h2 id="nodejs相关源码盘点"><a class="header-anchor" href="#nodejs相关源码盘点" aria-hidden="true">#</a> nodejs相关源码盘点</h2><ul><li><p>require</p><ul><li><p>删除require的缓存, 保证修改配置文件的时候，能够加载到最新的内容</p><div class="language-javascript"><pre><code> <span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">VNPN_CONFIG</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre></div></li></ul></li><li><p>Promise</p><ul><li><p>Promise.all</p><p><a href="https://www.bookstack.cn/read/es6-3rd/spilt.6.docs-promise.md" target="_blank" rel="noopener noreferrer">https://www.bookstack.cn/read/es6-3rd/spilt.6.docs-promise.md</a></p></li></ul></li><li><p>path</p><ul><li><p>path.relative()方法用于根据当前工作目录查找从给定路径到另一个路径的相对路径。如果两个给定路径相同，则它将解析为零长度的字符串。</p><div class="language-js"><pre><code><span class="token comment">// Node.js program to demonstrate the     </span>\n<span class="token comment">// path.relative() method  </span>\n     \n<span class="token comment">// Import the path module </span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n   \npath1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span><span class="token string">&quot;geeks/website&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;geeks/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span> \n   \npath2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span><span class="token string">&quot;users/admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin/files/website&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span> \n   \n<span class="token comment">// When both the paths are same </span>\n<span class="token comment">// It returns blank string </span>\npath3 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span><span class="token string">&quot;users/admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;users/admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span>\n</code></pre></div></li></ul></li></ul><h2 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ul><li>vscode插件发布相关 <ul><li><a href="http://t.zoukankan.com/liuxianan-p-vscode-plugin-publish.html" target="_blank" rel="noopener noreferrer">http://t.zoukankan.com/liuxianan-p-vscode-plugin-publish.html</a></li></ul></li></ul>',8);p.render=function(a,t,p,o,c,l){return s(),n("div",null,[e])};export default p;export{t as __pageData};
