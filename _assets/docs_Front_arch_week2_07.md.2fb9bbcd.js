import{g as l,f as i,G as e}from"./common-bec3f312.js";const a='{"title":"VSCode调试技巧","frontmatter":{"date":"2022-04-04","title":"VSCode调试技巧","tags":["前端架构师","week2","脚手架","debug","vscode"],"describe":null},"headers":[{"level":2,"title":"VSCode调试配置项说明","slug":"vscode调试配置项说明"}],"relativePath":"docs/Front_arch/week2/07.md","lastUpdated":1660147426752.5005}';var o={};const s=e('<h1 id="vscode-调试流程"><a class="header-anchor" href="#vscode-调试流程" aria-hidden="true">#</a> VSCode 调试流程</h1><ul><li>在需要调试的源码左侧单击创建断点</li></ul><p><img src="https://oss.filway.cn/filway-blog/1607567162386-83d6e9af-6457-470f-9789-78cae3b57eb0.png" alt="img"></p><ul><li>点击vscode左侧的debug工具</li></ul><p><img src="https://oss.filway.cn/filway-blog/1607567176575-fabbdfd7-3dbd-4b4d-a442-85d7ddf4900c.png" alt="img"></p><ul><li>点击左上角的设置按钮进入launch.json 点击添加配置选择配置</li></ul><p><img src="https://oss.filway.cn/filway-blog/1607567195472-5a9d79c1-b67b-4860-8df2-cdbccddc4bbc.png" alt="img"></p><ul><li>在配置中选择 “node.js 启动程序”会生成一下配置文件，修改配置中program为调试文件</li></ul><p><img src="https://oss.filway.cn/filway-blog/1607567251215-ebd5a45f-4343-4d31-bf6e-df155f4d6725.png" alt="img"></p><ul><li>配置完成后，在设置按钮左侧选择执行的名称并点击调试按钮进入调试</li></ul><p><img src="https://oss.filway.cn/filway-blog/1607567264183-152333bb-4604-43e9-a524-5984ec7bfd3c.png" alt="img"></p><h1 id="vscode-debug按钮功能介绍"><a class="header-anchor" href="#vscode-debug按钮功能介绍" aria-hidden="true">#</a> VSCode Debug按钮功能介绍</h1><p><img src="https://oss.filway.cn/filway-blog/1607567281937-6ed9ab9d-ca02-457f-858b-c76418ecb395.png" alt="img"></p><p>按钮从左到右功能依次为：</p><ul><li>按钮1：运行/继续 F5，直接跳转到下一断点；</li><li>按钮2：单步跳过(又叫逐过程) F10，按语句单步执行。当有函数时，不会进入函数；</li><li>按钮3：单步调试（又叫逐语句） F11：当有函数时，点击这个按钮，会进入这个函数内；</li><li>按钮4：单步跳出 ⇧F11:如果有循环，点击该按钮，会执行到循环外面的语句；</li><li>按钮5：重启 ⇧⌘F5；</li><li>按钮6：停止 ⇧F5。</li></ul><h1 id="vscode-launch-json常用变量"><a class="header-anchor" href="#vscode-launch-json常用变量" aria-hidden="true">#</a> VSCode launch.json常用变量</h1><ul><li>${workspaceRoot}：VS Code当前打开的文件夹</li><li>${file} ：当前打开的文件</li><li>${relativeFile}：相对于workspaceRoot的相对路径</li><li>${fileBasenameNoExtension}：当前文件的文件名，不带后缀，也即launch</li><li>${fileBasename}： 当前打开文件的文件名</li><li>${fileDirname}： 所在的文件夹，是绝对路径</li><li>${fileDirname}：文件所在的文件夹路径</li><li>${lineNumber}：当前文件光标所在的行号</li><li>${fileExtname}：当前打开文件的拓展名，如.json</li><li>${cwd}： 启动时任务运行程序的当前工作目录</li><li>${workspaceFolder}：表示当前workspace文件夹路径</li><li>${workspaceRootFolderName}：表示workspace的文件夹名</li><li>${env:PATH}：系统中的环境变量</li></ul><h1 id="vscode调试操作视频"><a class="header-anchor" href="#vscode调试操作视频" aria-hidden="true">#</a> VSCode调试操作视频</h1><p>此处为语雀视频卡片，点击链接查看：<a href="https://imooc-lego.yuque.com/docs/share/faa9343a-42c7-4493-b2a7-aafd8e369005#RjoZt" target="_blank" rel="noopener noreferrer">屏幕录制2020-12-10 上午10.22.24.mov</a></p><h1 id="附"><a class="header-anchor" href="#附" aria-hidden="true">#</a> 附</h1><h2 id="vscode调试配置项说明"><a class="header-anchor" href="#vscode调试配置项说明" aria-hidden="true">#</a> VSCode调试配置项说明</h2><p><strong>request：请求配置类型，可以为launch（启动）或attach（附加）</strong></p><p>下面是launch 和 attach 类型共有的属性：</p><ul><li>protocol：设置调试协议</li><li>auto： 尝试自动检测目标运行时使用的协议</li><li>inspector 新的V8调试器协议，解决遗留版本的多数问题，node versions &gt;= 6.3 and Electron versions &gt;= 1.7.4</li><li>legacy： 原始的v8调试器协议，node versions &lt; v8.0 and Electron versions &lt; 1.7.4.</li><li>port：调试使用的端口</li><li>address ：TCP/IP地址，用于远程调试</li><li>localRoot： 远程调试时映射的本地地址</li><li>remoteRoot： 远程调试时的远程目录地址</li><li>sourceMaps： 默认为true</li><li>outFiles ：当map文件不在js文件同目录时用于指定 sourceMaps的位置</li><li>restart ：自动重启调试</li><li>timeout： 配置自动附加的超时时间</li><li>stopOnEntry： 自动断点到第一行代码处</li><li>smartStep： 自动跳过未映射到源代码的代码</li><li>skipFiles :[]String,指定跳过单步调试的代码</li><li>trace ： 启用诊断输出</li></ul><p>以下是特定于类型 launch(启动)的配置属性：</p><ul><li>program： 指定调试入口文件地址</li><li>args ： []String 传递给程序的参数,可在process.argv拿到</li><li>cwd ：指定程序启动调试的目录 ,当vscode启动目录不是项目根目录，并且调试npm script时非常有用</li><li>runtimeExecutable： 设置运行时可执行文件路径，默认是node 可以是其他的执行程序，如npm、nodemon</li><li>runtimeArgs： 传递给运行时可执行文件的参数,例如：</li><li>runtimeVersion： 设置运行时可执行程序的版本，如果使用nvm，可以切换node.js版本</li><li>env： 添加额外的环境变量</li><li>envFile： 文件加载环境变量</li><li>console： 配置终端可以是外部终端或者内部集成终端，默认值internalConsole</li><li>autoAttachChildProcesses： 跟踪调试对象的所有子过程，并自动附加到在调试模式下启动的子过程</li></ul>',26);o.render=function(e,a,o,r,t,d){return i(),l("div",null,[s])};export default o;export{a as __pageData};
