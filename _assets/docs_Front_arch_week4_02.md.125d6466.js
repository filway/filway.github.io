import{g as n,f as a,G as s}from"./common-bec3f312.js";const t='{"title":"高性能脚手架架构设计","frontmatter":{"date":"2022-04-06","title":"高性能脚手架架构设计","tags":["前端架构师","week4","脚手架"],"describe":null},"headers":[{"level":2,"title":"痛点分析","slug":"痛点分析"},{"level":2,"title":"脚手架架构优化","slug":"脚手架架构优化"},{"level":2,"title":"脚手架命令动态加载功能架构设计","slug":"脚手架命令动态加载功能架构设计"},{"level":3,"title":"缓存目录","slug":"缓存目录"}],"relativePath":"docs/Front_arch/week4/02.md","lastUpdated":1660147426756.5005}';var e={};const p=s('<h2 id="痛点分析"><a class="header-anchor" href="#痛点分析" aria-hidden="true">#</a> 痛点分析</h2><p>当前脚手架架构如下图：</p><p><img src="https://oss.filway.cn/filway-blog/5fe4a37908dd3d1b13720561.jpg" alt="arch"></p><p>这样的架构设计已经可以满足一般脚手架需求，但是有以下两个问题：</p><ol><li>cli 安装速度慢：所有 package 都集成在 cli 里，因此当命令较多时，会减慢 cli 的安装速度</li><li>灵活性差：init 命令只能使用 @imooc-cli-dev/init 包，对于集团公司而言，每个 bu 的 init 命令可能都各不相同，可能需要实现 init 命令动态化，如：</li></ol><ul><li>团队 A 使用 @imooc-cli-dev/init 作为初始化模块</li><li>团队 B 使用自己开发的 @imooc-cli-dev/my-init 作为初始化模块</li><li>团队 C 使用自己开发的 @imooc-cli-dev/your-init 作为初始化模块</li></ul><p>这时对我们的架构设计就提出挑战，要求我们能够动态加载 init 模块，这将增加架构的复杂度，但大大提升脚手架的可扩展性，将脚手架框架和业务逻辑解耦</p><h2 id="脚手架架构优化"><a class="header-anchor" href="#脚手架架构优化" aria-hidden="true">#</a> 脚手架架构优化</h2><p>优化结果如下：</p><p><img src="https://oss.filway.cn/filway-blog/5fe4a38e0843547a16001459.jpg" alt="init-arch"></p><h2 id="脚手架命令动态加载功能架构设计"><a class="header-anchor" href="#脚手架命令动态加载功能架构设计" aria-hidden="true">#</a> 脚手架命令动态加载功能架构设计</h2><p>架构设计图如下：</p><p><img src="https://oss.filway.cn/filway-blog/5fe4a3a408c7620016001303.jpg" alt="package"></p><h3 id="缓存目录"><a class="header-anchor" href="#缓存目录" aria-hidden="true">#</a> 缓存目录</h3><p>缓存目录位于用户主目录下的 <code>.imooc-cli</code>，如果没有生成该目录时，我们可以手动创建，或者通过如下代码生成：</p><div class="language-js"><pre><code><span class="token keyword">const</span> userHome <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;user-home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs-extra&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cachePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>userHome<span class="token punctuation">,</span> <span class="token string">&#39;.imooc-cli&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成缓存目录路径</span>\n\nfse<span class="token punctuation">.</span><span class="token function">mkdirpSync</span><span class="token punctuation">(</span>cachePath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成缓存目录</span>\n</code></pre></div>',16);e.render=function(s,t,e,o,c,i){return a(),n("div",null,[p])};export default e;export{t as __pageData};
