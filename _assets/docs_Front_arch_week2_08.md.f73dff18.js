import{g as e,f as l,G as i}from"./common-bec3f312.js";const a='{"title":"Lerna重新设计简历","frontmatter":{"date":"2022-04-04","title":"Lerna重新设计简历","tags":["前端架构师","week2","脚手架"],"describe":null},"headers":[{"level":2,"title":"简历简介","slug":"简历简介"},{"level":2,"title":"学完本章后应该怎么改简历？","slug":"学完本章后应该怎么改简历？"},{"level":2,"title":"面试官问起细节后如何回答？","slug":"面试官问起细节后如何回答？"},{"level":3,"title":"yargs","slug":"yargs"},{"level":3,"title":"Lerna","slug":"lerna"},{"level":3,"title":"Node.js 模块路径解析流程","slug":"node-js-模块路径解析流程"}],"relativePath":"docs/Front_arch/week2/08.md","lastUpdated":1660147426752.5005}';var r={};const d=i('<h2 id="简历简介"><a class="header-anchor" href="#简历简介" aria-hidden="true">#</a> 简历简介</h2><p>简历中简介部分至关重要，因为它位于简历的第一屏，是面试官最容易关注的部分，所以我们应该在简介部分充分突出我们的个人特长和优势</p><h2 id="学完本章后应该怎么改简历？"><a class="header-anchor" href="#学完本章后应该怎么改简历？" aria-hidden="true">#</a> 学完本章后应该怎么改简历？</h2><p>完全掌握本章内容的同学可以在简历中增加：</p><ul><li>熟悉Yargs脚手架开发框架</li><li>熟悉多Package管理工具Lerna的使用方法和实现原理</li><li>深入理解Node.js模块路径解析流程</li></ul><h2 id="面试官问起细节后如何回答？"><a class="header-anchor" href="#面试官问起细节后如何回答？" aria-hidden="true">#</a> 面试官问起细节后如何回答？</h2><h3 id="yargs"><a class="header-anchor" href="#yargs" aria-hidden="true">#</a> yargs</h3><ul><li>脚手架构成 <ul><li>bin：package.json中配置bin属性，npm link 本地安装</li><li>command：命令</li><li>options：参数（boolean/string/number）</li><li>文件顶部增加 <code>#!/usr/bin/env node</code></li></ul></li><li>脚手架初始化流程 <ul><li>构造函数：Yargs()</li><li>常用方法： <ul><li>Yargs.options</li><li>Yargs.option</li><li>Yargs.group</li><li>Yargs.demandCommand</li><li>Yargs.recommendCommands</li><li>Yargs.strict</li><li>Yargs.fail</li><li>Yargs.alias</li><li>Yargs.wrap</li><li>Yargs.epilogue</li></ul></li></ul></li><li>脚手架参数解析方法 <ul><li>hideBin(process.argv) / Yargs.argv</li><li>Yargs.parse(argv, options)</li></ul></li><li>命令注册方法 <ul><li>Yargs.command(command, describe, builder, handler)</li><li>Yargs.command({ command, describe, builder, handler })</li></ul></li></ul><h3 id="lerna"><a class="header-anchor" href="#lerna" aria-hidden="true">#</a> Lerna</h3><ul><li>Lerna 是基于 git+npm 的多package项目管理工具</li><li>实现原理 <ul><li>通过 import-local 优先调用本地 lerna 命令</li><li>通过 Yargs 生成脚手架，先注册全局属性，再注册命令，最后通过 parse 方法解析参数</li><li>lerna 命令注册时需要传入 builder 和 handler 两个方法，builder 方法用于注册命令专属的 options，handler 用来处理命令的业务逻辑</li><li>lerna 通过配置 npm 本地依赖的方式来进行本地开发，具体写法是在 package.json 的依赖中写入：<code>file:your-local-module-path</code> ，在 lerna publish 时会自动将该路径替换</li></ul></li></ul><h3 id="node-js-模块路径解析流程"><a class="header-anchor" href="#node-js-模块路径解析流程" aria-hidden="true">#</a> Node.js 模块路径解析流程</h3><ul><li><p>Node.js 项目模块路径解析是通过 <code>require.resolve</code> 方法来实现的</p></li><li><p><code>require.resolve</code> 就是通过 <code>Module._resolveFileName</code> 方法实现的</p></li><li><div class="language-"><pre><code>require.resolve\n</code></pre></div><p>实现原理：</p><ul><li><div class="language-"><pre><code>Module._resolveFileName\n</code></pre></div><p>方法核心流程有 3 点：</p><ul><li>判断是否为内置模块</li><li>通过 <code>Module._resolveLookupPaths</code> 方法生成 node_modules 可能存在的路径</li><li>通过 <code>Module._findPath</code> 查询模块的真实路径</li></ul></li><li><div class="language-"><pre><code>Module._findPath\n</code></pre></div><p>核心流程有 4 点：</p><ul><li>查询缓存（将 request 和 paths 通过 <code>\\x00</code> 合并成 cacheKey）</li><li>遍历 paths，将 path 与 request 组成文件路径 basePath</li><li>如果 basePath 存在则调用 <code>fs.realPathSync</code> 获取文件真实路径</li><li>将文件真实路径缓存到 <code>Module._pathCache</code>（key 就是前面生成的 cacheKey）</li></ul></li><li><div class="language-"><pre><code>fs.realPathSync\n</code></pre></div><p>核心流程有 3 点：</p><ul><li><p>查询缓存（缓存的 key 为 p，即 <code>Module._findPath</code> 中生成的文件路径）</p></li><li><p>从左往右遍历路径字符串，查询到</p><div class="language-"><pre><code>/\n</code></pre></div><p>时，拆分路径，判断该路径是否为软链接，如果是软链接则查询真实链接，并生成新路径 p，然后继续往后遍历，这里有 1 个细节需要特别注意：</p><ul><li>遍历过程中生成的子路径 base 会缓存在 knownHard 和 cache 中，避免重复查询</li></ul></li><li><p>遍历完成得到模块对应的真实路径，此时会将原始路径 original 作为 key，真实路径作为 value，保存到缓存中</p></li></ul></li></ul></li><li><p><code>require.resolve.paths</code> 等价于 <code>Module._resolveLookupPaths</code>，该方法用于获取所有 node_modules 可能存在的路径</p></li><li><div class="language-"><pre><code>require.resolve.paths\n</code></pre></div><p>实现原理：</p><ul><li>如果路径为 <code>/</code>（根目录），直接返回 <code>[&#39;/node_modules&#39;]</code></li><li>否则，将路径字符串从后往前遍历，查询到 <code>/</code> 时，拆分路径，在后面加上 node_modules，并传入一个 paths 数组，直至查询不到 <code>/</code> 后返回 paths 数组</li></ul></li></ul>',12);r.render=function(i,a,r,o,s,c){return l(),e("div",null,[d])};export default r;export{a as __pageData};
