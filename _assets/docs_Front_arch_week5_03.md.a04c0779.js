import{g as n,f as s,G as a}from"./common-bec3f312.js";const t='{"title":"命令行交互原理","frontmatter":{"date":"2022-04-20","title":"命令行交互原理","tags":["前端架构师","week5","egg","mongodb"],"describe":null},"headers":[{"level":2,"title":"学习路径","slug":"学习路径"},{"level":3,"title":"readline 源码分析","slug":"readline-源码分析"},{"level":2,"title":"如何开发命令行交互列表","slug":"如何开发命令行交互列表"},{"level":3,"title":"实现原理","slug":"实现原理"},{"level":3,"title":"架构图","slug":"架构图"}],"relativePath":"docs/Front_arch/week5/03.md","lastUpdated":1660147426756.5005}';var p={};const o=a('<h2 id="学习路径"><a class="header-anchor" href="#学习路径" aria-hidden="true">#</a> 学习路径</h2><ul><li>掌握：readline / events / stream / ansi-escapes / rxjs</li><li>掌握命令行交互的实现原理，并实现一个可交互的列表</li><li>分析 inquirer 源码掌握其中的关键实现</li></ul><blockquote><p>ANSI-escape-code查阅文档：<a href="https://handwiki.org/wiki/ANSI_escape_code" target="_blank" rel="noopener noreferrer">https://handwiki.org/wiki/ANSI_escape_code</a></p></blockquote><h3 id="readline-源码分析"><a class="header-anchor" href="#readline-源码分析" aria-hidden="true">#</a> readline 源码分析</h3><ul><li>强制将函数转换为构建函数</li></ul><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Interface</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Interface</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">,</span> completer<span class="token punctuation">,</span> terminal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>获得事件驱动能力</li></ul><div class="language-js"><pre><code><span class="token function">EventEmitter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>监听键盘事件</li></ul><div class="language-js"><pre><code><span class="token function">emitKeypressEvents</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// `input` usually refers to stdin</span>\ninput<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;keypress&#39;</span><span class="token punctuation">,</span> onkeypress<span class="token punctuation">)</span><span class="token punctuation">;</span>\ninput<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> ontermend<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>readline 核心实现原理：</p><p><img src="https://oss.filway.cn/filway-blog/5fefe7be08f4149216001076.jpg" alt="图片描述"></p><blockquote><p>注：readline利用了Generator函数的特性，还不熟悉Generator函数的同学可以查看：<a href="https://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="noopener noreferrer">https://es6.ruanyifeng.com/#docs/generator</a></p></blockquote><p>手写简单版readline</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">stepRead</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> input <span class="token operator">=</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> output <span class="token operator">=</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">onKeyPress</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n    line <span class="token operator">+=</span> s<span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;\\r&#39;</span><span class="token operator">:</span>\n        input<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">emitkeyPressEvents</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>\n  input<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;keypress&#39;</span><span class="token punctuation">,</span> onKeyPress<span class="token punctuation">)</span>\n\n  input<span class="token punctuation">.</span><span class="token function">setRawMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n  input<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n\n<span class="token keyword">function</span> <span class="token function">emitkeyPressEvents</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">onData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">emitKeys</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span>\n  g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> onData<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">emitKeys</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ch <span class="token operator">=</span> <span class="token keyword">yield</span>\n    stream<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;keypress&#39;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">stepRead</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;answer: &#39;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="如何开发命令行交互列表"><a class="header-anchor" href="#如何开发命令行交互列表" aria-hidden="true">#</a> 如何开发命令行交互列表</h2><h3 id="实现原理"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><p><img src="https://oss.filway.cn/filway-blog/5fefe7c9086e5bb516000645.jpg" alt="图片描述"></p><blockquote><p>获取字符串的核心实现：</p><div class="language-js"><pre><code><span class="token function-variable function">getContent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>haveSelected<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">&#39;\\x1B[32m?\\x1B[39m \\x1B[1m&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">&#39;\\x1B[22m\\x1B[0m \\x1B[0m\\x1B[2m(Use arrow keys)\\x1B[22m\\n&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>choices<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">choice<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>choices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          title <span class="token operator">+=</span> <span class="token string">&#39;\\x1B[36m❯ &#39;</span> <span class="token operator">+</span> choice<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;\\x1B[39m &#39;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          title <span class="token operator">+=</span> <span class="token string">&#39;\\x1B[36m❯ &#39;</span> <span class="token operator">+</span> choice<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;\\x1B[39m \\n&#39;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>choices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          title <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>choice<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          title <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>choice<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> \\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>choices<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> title<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">&#39;\\x1B[32m?\\x1B[39m \\x1B[1m&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">&#39;\\x1B[22m\\x1B[0m \\x1B[36m&#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;\\x1B[39m\\x1B[0m \\n&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> title<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></blockquote><h3 id="架构图"><a class="header-anchor" href="#架构图" aria-hidden="true">#</a> 架构图</h3><p><img src="https://oss.filway.cn/filway-blog/5fefe7da085597a605971600.jpg" alt="图片描述"></p>',21);p.render=function(a,t,p,e,c,l){return s(),n("div",null,[o])};export default p;export{t as __pageData};
