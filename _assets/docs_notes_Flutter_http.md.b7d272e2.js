import{g as n,f as s,G as a}from"./common-bec3f312.js";const t='{"title":"基于Http实现网络操作","frontmatter":{"date":"2022-04-13","title":"基于Http实现网络操作","tags":["Flutter"],"describe":null},"headers":[{"level":2,"title":"基于Http实现网络操作","slug":"基于http实现网络操作"},{"level":2,"title":"什么是Http？","slug":"什么是http？"},{"level":2,"title":"如何用http库做get请求？","slug":"如何用http库做get请求？"},{"level":2,"title":"如何用http库做post请求？","slug":"如何用http库做post请求？"},{"level":2,"title":"如何将Response转换成Dart object？","slug":"如何将response转换成dart-object？"},{"level":3,"title":"创建一个CommonModel类","slug":"创建一个commonmodel类"},{"level":3,"title":"将http.Response转换成一个CommonModel对象","slug":"将http-response转换成一个commonmodel对象"},{"level":2,"title":"如何将请求结果展示在界面上？","slug":"如何将请求结果展示在界面上？"}],"relativePath":"docs/notes/Flutter/http.md","lastUpdated":1660147426756.5005}';var p={};const o=a('<h2 id="基于http实现网络操作"><a class="header-anchor" href="#基于http实现网络操作" aria-hidden="true">#</a> 基于Http实现网络操作</h2><ul><li>如何用Http库做get请求？</li><li>如何用Http库做post请求？</li><li>如何将Response转换成Dart object？</li><li>如何将请求结果展示在界面上？</li></ul><p>网络请求是开发APP必不可少的一部分，比如获取用户订单数据，获取商品列表，提交表单等等都离不了网络请求，那么在Flutter中如何进行网络请求呢？</p><blockquote><p>Flutter官方推荐我们在Flutter中用Http进行网络请求。</p></blockquote><h2 id="什么是http？"><a class="header-anchor" href="#什么是http？" aria-hidden="true">#</a> 什么是Http？</h2><p>Http 是Flutter社区开发的一个可组合的、跨平台的用于Flutter的网络请求插件。</p><h2 id="如何用http库做get请求？"><a class="header-anchor" href="#如何用http库做get请求？" aria-hidden="true">#</a> 如何用http库做get请求？</h2><ul><li>在<code>pubspec.yaml</code>中引入<a href="https://pub.dartlang.org/packages/http" target="_blank" rel="noopener noreferrer">http</a>插件；</li><li>调用<code>http.get</code>发送请求；</li></ul><div class="language-yaml"><pre><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">http</span><span class="token punctuation">:</span> &lt;latest_version<span class="token punctuation">&gt;</span>\nFuture&lt;http.Response<span class="token punctuation">&gt;</span> fetchPost() <span class="token punctuation">{</span>\n  return http.get(&#39;https<span class="token punctuation">:</span>//jsonplaceholder.typicode.com/posts/1&#39;);\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>http.get()</code>返回一个包含<code>http.Response</code>的<code>Future</code>：</p><ul><li><a href="https://docs.flutter.io/flutter/dart-async/Future-class.html" target="_blank" rel="noopener noreferrer">Future</a>：是与异步操作一起工作的核心Dart类。它用于表示未来某个时间可能会出现的可用值或错误；</li><li><code>http.Response</code>：类包含一个成功的HTTP请求接收到的数据；</li></ul><blockquote><p>在一节会重点讲解<code>Future</code>的用法，如何从<code>Future</code>中获取服务端具体的返回数据。</p></blockquote><h2 id="如何用http库做post请求？"><a class="header-anchor" href="#如何用http库做post请求？" aria-hidden="true">#</a> 如何用http库做post请求？</h2><ul><li>在<code>pubspec.yaml</code>中引入<a href="https://pub.dartlang.org/packages/http" target="_blank" rel="noopener noreferrer">http</a>插件；</li><li>调用<code>http.post</code>发送请求；</li></ul><div class="language-"><pre><code>dependencies:\n  http: &lt;latest_version&gt;\nFuture&lt;http.Response&gt; fetchPost() {\n  return http.post(&#39;https://jsonplaceholder.typicode.com/posts/1&#39;);\n}\n</code></pre></div><p><code>http.post()</code>返回一个包含<code>http.Response</code>的<code>Future</code>：</p><ul><li><a href="https://docs.flutter.io/flutter/dart-async/Future-class.html" target="_blank" rel="noopener noreferrer">Future</a>：是与异步操作一起工作的核心Dart类。它用于表示未来某个时间可能会出现的可用值或错误；</li><li><code>http.Response</code>：类包含一个成功的HTTP请求接收到的数据；</li></ul><blockquote><p>在一节会重点讲解<code>Future</code>的用法，如何从<code>Future</code>中获取服务端具体的返回数据。</p></blockquote><h2 id="如何将response转换成dart-object？"><a class="header-anchor" href="#如何将response转换成dart-object？" aria-hidden="true">#</a> 如何将Response转换成Dart object？</h2><p>虽然发出网络请求很简单，但如果要使用原始的<code>Future&lt;http.Response&gt;</code>并不简单。为了让我们可以开开心心的写代码，我们可以将<code>http.Response</code>转换成我们自己的Dart对象。</p><h3 id="创建一个commonmodel类"><a class="header-anchor" href="#创建一个commonmodel类" aria-hidden="true">#</a> 创建一个CommonModel类</h3><p>首先，我们需要创建一个CommonModel类，它包含我们网络请求的数据。它还将包括一个工厂构造函数，它允许我们可以通过json创建一个CommonModel对象。</p><div class="language-dart"><pre><code><span class="token keyword">class</span> <span class="token class-name">CommonModel</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span> String icon<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String title<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String url<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String statusBarColor<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> bool hideAppBar<span class="token punctuation">;</span>\n\n  <span class="token function">CommonModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>icon<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>statusBarColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hideAppBar<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">factory</span> CommonModel<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">CommonModel</span><span class="token punctuation">(</span>\n      icon<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;icon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      title<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      url<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      statusBarColor<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;statusBarColor&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      hideAppBar<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;hideAppBar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="将http-response转换成一个commonmodel对象"><a class="header-anchor" href="#将http-response转换成一个commonmodel对象" aria-hidden="true">#</a> 将<code>http.Response</code>转换成一个<code>CommonModel</code>对象</h3><p>现在，我们将更新<code>fetchPost</code>函数以返回一个<code>Future&lt;Post&gt;</code>。为此，我们需要：</p><ol><li>使用<code>dart:convert</code> package将响应内容转化为一个<code>json</code> Map；</li><li>使用fromJson工厂函数，将json Map 转化为一个CommonModel对象；</li></ol><div class="language-dart"><pre><code>Future<span class="token operator">&lt;</span>CommonModel<span class="token operator">&gt;</span> <span class="token function">fetchPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.devio.org/io/flutter_app/json/test_common_model.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> result <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonModel<span class="token punctuation">.</span>fromJson</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h2 id="如何将请求结果展示在界面上？"><a class="header-anchor" href="#如何将请求结果展示在界面上？" aria-hidden="true">#</a> 如何将请求结果展示在界面上？</h2><p><img src="https://oss.filway.cn/filway-blog/http_get_test.gif" alt="http_get_test"></p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;dart:convert&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token string">&#39;package:flutter/material.dart&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;package:http/http.dart&#39;</span> <span class="token operator">as</span> http<span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata symbol">@override</span>\n  State<span class="token operator">&lt;</span>StatefulWidget<span class="token operator">&gt;</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_MyAppState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">_MyAppState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>MyApp<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  String showResult <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n  Future<span class="token operator">&lt;</span>CommonModel<span class="token operator">&gt;</span> <span class="token function">fetchPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http\n        <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.devio.org/io/flutter_app/json/test_common_model.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> result <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> CommonModel<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata symbol">@override</span>\n  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>\n      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>\n        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>\n          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        body<span class="token punctuation">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>\n          children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">&gt;</span><span class="token punctuation">[</span>\n            <span class="token function">InkWell</span><span class="token punctuation">(</span>\n              onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">fetchPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CommonModel value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    showResult <span class="token operator">=</span>\n                        <span class="token string">&#39;请求结果：\\nhideAppBar：${value.hideAppBar}\\nicon：${value.icon}&#39;</span><span class="token punctuation">;</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>\n                <span class="token string">&#39;点我&#39;</span><span class="token punctuation">,</span>\n                style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>showResult<span class="token punctuation">)</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">CommonModel</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span> String icon<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String title<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String url<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String statusBarColor<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> bool hideAppBar<span class="token punctuation">;</span>\n\n  <span class="token function">CommonModel</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>icon<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>statusBarColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hideAppBar<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">factory</span> CommonModel<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">CommonModel</span><span class="token punctuation">(</span>\n      icon<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;icon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      title<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      url<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      statusBarColor<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;statusBarColor&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      hideAppBar<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;hideAppBar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',30);p.render=function(a,t,p,e,c,l){return s(),n("div",null,[o])};export default p;export{t as __pageData};
