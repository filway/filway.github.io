import{g as e,f as r,G as n}from"./common-bec3f312.js";const t='{"title":"基于shared_preferences本地存储操作","frontmatter":{"date":"2022-04-13","title":"基于shared_preferences本地存储操作","tags":["Flutter"],"describe":null},"headers":[{"level":2,"title":"基于shared_preferences本地存储操作","slug":"基于shared-preferences本地存储操作"},{"level":2,"title":"什么是shared_preferences?","slug":"什么是shared-preferences"},{"level":2,"title":"如何使用shared_preferences？","slug":"如何使用shared-preferences？"},{"level":2,"title":"shared_preferences有那些常用的API？","slug":"shared-preferences有那些常用的api？"},{"level":3,"title":"存储相关","slug":"存储相关"},{"level":3,"title":"读取相关","slug":"读取相关"},{"level":2,"title":"基于shared_preferences实现计数器Demo","slug":"基于shared-preferences实现计数器demo"},{"level":2,"title":"参考","slug":"参考"}],"relativePath":"docs/notes/Flutter/shared_preferences.md","lastUpdated":1660147426756.5005}';var a={};const s=n('<h2 id="基于shared-preferences本地存储操作"><a class="header-anchor" href="#基于shared-preferences本地存储操作" aria-hidden="true">#</a> 基于shared_preferences本地存储操作</h2><ul><li><code>shared_preferences</code> 是什么？</li><li>如何使用<code>shared_preferences</code>？</li><li><code>shared_preferences</code>有那些常用的API？</li><li>基于<code>shared_preferences</code>实现计数器Demo</li></ul><p>数据存储是开发APP必不可少的一部分，比如页面缓存，从网络上获取数据的本地持久化等，那么在Flutter中如何进行数据存储呢？</p><blockquote><p>Flutter官方推荐我们用sharedpreferences进行数据存储，类似于RN中的<code>AsyncStorage</code>。</p></blockquote><h2 id="什么是shared-preferences"><a class="header-anchor" href="#什么是shared-preferences" aria-hidden="true">#</a> 什么是shared_preferences?</h2><p><a href="https://pub.dartlang.org/packages/shared_preferences#-installing-tab-" target="_blank" rel="noopener noreferrer">shared_preferences</a>是Flutter社区开发的一个本地数据存取插件：</p><ul><li>简单的，异步的，持久化的key-value存储系统；</li><li>在Android上它是基于<code>SharedPreferences</code>的；</li><li>在iOS上它是基于<code>NSUserDefaults</code>的；</li></ul><h2 id="如何使用shared-preferences？"><a class="header-anchor" href="#如何使用shared-preferences？" aria-hidden="true">#</a> 如何使用shared_preferences？</h2><p>首先在<code>pubspec.yaml</code>文件中添加：</p><div class="language-"><pre><code>dependencies:\n  shared_preferences: ^0.5.1+\n</code></pre></div><p>记得运行安装哦：<code>flutter packages get</code></p><p>在需要用到的文件中导入：</p><div class="language-"><pre><code>import &#39;package:shared_preferences/shared_preferences.dart&#39;;\n</code></pre></div><blockquote><p>存储数据</p></blockquote><div class="language-"><pre><code>final prefs = await SharedPreferences.getInstance();\n\n// set value\nprefs.setInt(&#39;counter&#39;, counter);\n</code></pre></div><blockquote><p>读取数据</p></blockquote><div class="language-"><pre><code>final prefs = await SharedPreferences.getInstance();\n\n// Try reading data from the counter key. If it does not exist, return 0.\nfinal counter = prefs.getInt(&#39;counter&#39;) ?? 0;}\n</code></pre></div><blockquote><p>删除数据</p></blockquote><div class="language-"><pre><code>final prefs = await SharedPreferences.getInstance();\nprefs.remove(&#39;counter&#39;);\n</code></pre></div><h2 id="shared-preferences有那些常用的api？"><a class="header-anchor" href="#shared-preferences有那些常用的api？" aria-hidden="true">#</a> shared_preferences有那些常用的API？</h2><h3 id="存储相关"><a class="header-anchor" href="#存储相关" aria-hidden="true">#</a> 存储相关</h3><p><img src="https://oss.filway.cn/filway-blog/shared_preferences_set.png" alt="shared_preferences"></p><blockquote><p>如上图<code>shared_preferences</code>支持int, double, bool, string 与 stringList类型的数据存储；</p></blockquote><h3 id="读取相关"><a class="header-anchor" href="#读取相关" aria-hidden="true">#</a> 读取相关</h3><p><img src="https://oss.filway.cn/filway-blog/shared_preferences_get.png" alt="shared_preferences"></p><blockquote><p>上图<code>shared_preferences</code>中所提供的读取相关的API；</p></blockquote><h2 id="基于shared-preferences实现计数器demo"><a class="header-anchor" href="#基于shared-preferences实现计数器demo" aria-hidden="true">#</a> 基于shared_preferences实现计数器Demo</h2><p><img src="https://oss.filway.cn/filway-blog/shared_preferences_demo.gif" alt="shared_preferences"></p><div class="language-"><pre><code>import &#39;package:flutter/material.dart&#39;;\nimport &#39;package:shared_preferences/shared_preferences.dart&#39;;\n\nvoid main() {\n  runApp(MaterialApp(\n    home: Scaffold(\n      appBar: AppBar(\n        title: Text(&#39;shared_preferences&#39;),\n      ),\n      body: _CounterWidget(),\n    ),\n  ));\n}\n\nclass _CounterWidget extends StatefulWidget {\n  @override\n  _CounterState createState() =&gt; _CounterState();\n}\n\nclass _CounterState extends State&lt;_CounterWidget&gt; {\n  String countString = &#39;&#39;;\n  String localCount = &#39;&#39;;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        children: &lt;Widget&gt;[\n          RaisedButton(\n              onPressed: _incrementCounter, child: Text(&#39;Increment Counter&#39;)),\n          RaisedButton(onPressed: _getCounter, child: Text(&#39;Get Counter&#39;)),\n          Text(\n            countString,\n            style: TextStyle(fontSize: 20),\n          ),\n          Text(\n            &#39;result：&#39; + localCount,\n            style: TextStyle(fontSize: 20),\n          ),\n        ],\n      ),\n    );\n  }\n\n  _incrementCounter() async {\n    SharedPreferences prefs = await SharedPreferences.getInstance();\n    setState(() {\n      countString = countString + &quot; 1&quot;;\n    });\n    int counter = (prefs.getInt(&#39;counter&#39;) ?? 0) + 1;\n    await prefs.setInt(&#39;counter&#39;, counter);\n  }\n\n  _getCounter() async {\n    SharedPreferences prefs = await SharedPreferences.getInstance();\n    setState(() {\n      localCount = prefs.getInt(&#39;counter&#39;).toString();\n    });\n  }\n}\n</code></pre></div><h2 id="参考"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ul><li><a href="https://flutter.dev/docs/cookbook/persistence/key-value" target="_blank" rel="noopener noreferrer">Storing key-value data on disk</a></li></ul>',31);a.render=function(n,t,a,d,c,o){return r(),e("div",null,[s])};export default a;export{t as __pageData};
