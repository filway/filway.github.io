import{g as e,f as n,G as a}from"./common-bec3f312.js";const s='{"title":"jS库开发","frontmatter":{"date":"2022-05-15","title":"jS库开发","tags":["监控"],"describe":"前端监控"},"headers":[{"level":2,"title":"浏览器的5种 Observer","slug":"浏览器的5种-observer-2"},{"level":3,"title":"MutationObserver","slug":"mutationobserver"},{"level":3,"title":"IntersectionObserver","slug":"intersectionobserver"},{"level":3,"title":"PerformanceObserver","slug":"performanceobserver"},{"level":3,"title":"ResizeObserver","slug":"resizeobserver"},{"level":3,"title":"ReportingObserver","slug":"reportingobserver"},{"level":2,"title":"实现前端监控的思路","slug":"实现前端监控的思路"}],"relativePath":"docs/front_monitoring/js_lib/js_sdk.md","lastUpdated":1660147426756.5005}';var t={};const o=a('<h1 id="浏览器的5种-observer"><a class="header-anchor" href="#浏览器的5种-observer" aria-hidden="true">#</a> 浏览器的5种 Observer</h1><h2 id="浏览器的5种-observer-2"><a class="header-anchor" href="#浏览器的5种-observer-2" aria-hidden="true">#</a> 浏览器的5种 Observer</h2><ul><li>MutationObserver</li><li>IntersectionObserver</li><li>PerformanceObserver</li><li>ResizeObserver</li><li>ReportingObserver</li></ul><h3 id="mutationobserver"><a class="header-anchor" href="#mutationobserver" aria-hidden="true">#</a> MutationObserver</h3><blockquote><p>MutationObserver: 监听 DOM 树的变化（属性、子节点的增删改）</p></blockquote><h4 id="语法"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><p>const observer = new MutationObserver(callback);</p><h4 id="demo-案例"><a class="header-anchor" href="#demo-案例" aria-hidden="true">#</a> demo 案例</h4><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>MutationObserverDOM<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addChildDOM<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleAddDom()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>添加元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addAttribute<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleAttribute()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>添加属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\nconst addAttributr = document.querySelector(&#39;.addAttribute&#39;)\nconst addChildDOM = document.querySelector(&#39;.addChildDOM&#39;)\nconst MtovDom = document.querySelector(&#39;.MutationObserverDOM&#39;)\nconst mutationObserver = new MutationObserver((mutationsList) =&gt; {\n  console.log(mutationsList,&#39;MutationObserver&#39;)\n});\nmutationObserver.observe(MtovDom,{\n  attributes: true,\n  childList: true,\n  subtree: true\n})\n// 添加元素\nfunction handleAddDom(){\n  append(MtovDom, &#39;p&#39;, &#39;childClass&#39;, &#39;子元素内容&#39;)\n}\nfunction append(parentElement,childElement,childClass,childElementContent){\n  const child = document.createElement(childElement)\n  child.className = childClass\n  child.innerHTML = childElementContent ? childElementContent : &#39;默认内容&#39;\n  parentElement.appendChild(child)\n}\nfunction handleAttribute(){\n  MtovDom.setAttribute(&#39;data&#39;,&#39;addName&#39;)\n}\n</code></pre></div><h4 id="方法"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h4><ul><li>observe: 监听指定的元素节点变化。</li></ul><blockquote><p>语法: mutationObserver.observe(target[, options])</p></blockquote><ul><li>disconnect: 停止监听，直到重新调用observe方法</li></ul><blockquote><p>语法: mutationObserver.disconnect()</p></blockquote><h4 id="config-配置项"><a class="header-anchor" href="#config-配置项" aria-hidden="true">#</a> config 配置项</h4><ul><li>childList: 子节点的新增和删除</li><li>attributes: 属性的变化</li><li>characterData: 节点内容或节点文本的变化</li><li>subtree: 是否将该观察作用于该节点的所有后代节点</li><li>attributeOldValue: 是否需要记录变动前的属性值</li><li>attributeFilter: 需要观察的特定属性</li><li>characterDataOldValue: 观察attributes变动时，是否需要记录变动前的属性值</li></ul><h4 id="返回参数"><a class="header-anchor" href="#返回参数" aria-hidden="true">#</a> 返回参数</h4><ul><li>type: 如果是属性发生变化,则返回attributes，如果是目标节点的某个子节点发生了变化,则返回childList.</li><li>target: 返回此次变化影响到的节点即观察的 DOM</li><li>addedNodes: 返回被添加的节点</li><li>removedNodes: 返回被删除的节点</li><li>previousSibling: 返回被添加或被删除的节点的前一个兄弟节点</li><li>nextSibling: 返回被添加或被删除的节点的后一个兄弟节点</li><li>oldValue: 跟据type值的不同,返回的值也会不同.如果type为attributes,则返回该属性变化之前的属性值.如果type为characterData,则返回该节点变化之前的文本数据.如果type为childList,则返回null</li></ul><h3 id="intersectionobserver"><a class="header-anchor" href="#intersectionobserver" aria-hidden="true">#</a> IntersectionObserver</h3><blockquote><p>IntersectionObserver: 监听一个元素和可视区域相交部分的比例，然后在可视比例达到某个阈值的时候触发回调</p></blockquote><h4 id="语法-2"><a class="header-anchor" href="#语法-2" aria-hidden="true">#</a> 语法</h4><p>const observer = new IntersectionObserver(callback, options);</p><h4 id="demo-案例-2"><a class="header-anchor" href="#demo-案例-2" aria-hidden="true">#</a> demo 案例</h4><div class="language-html"><pre><code>.demo1,.demo2{\n  width: 120px;\n  height: 120px;\n  border: 1px solid #000;\n  position: relative;\n  text-align: center;\n  line-height: 120px;\n}\n.demo1 {\ntop: 300px;\n}\n.demo2 {\n  top: 900px;\n}\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n\nconst intersectionObserver = new IntersectionObserver(\n  function (entries) {\n      console.log(entries);\n  }, {\n  threshold: [0.5, 1]\n});\nintersectionObserver.observe( document.querySelector(&#39;.demo1&#39;));\nintersectionObserver.observe( document.querySelector(&#39;.demo2&#39;));\n\n</code></pre></div><h4 id="方法-2"><a class="header-anchor" href="#方法-2" aria-hidden="true">#</a> 方法</h4><ul><li>observe: 开始监听一个目标元素</li></ul><blockquote><p>语法: intersectionObserver.disconnect();</p></blockquote><ul><li>disconnect: 停止监听</li></ul><blockquote><p>语法: IntersectionObserver.observe(targetElement);</p></blockquote><ul><li>takeRecords: 返回所有观察目标的 IntersectionObserverEntry 对象数组。</li></ul><blockquote><p>语法: intersectionObserverEntries = intersectionObserver.takeRecords();</p></blockquote><ul><li>unobserve: 使 IntersectionObserver 停止监听特定目标元素。</li></ul><blockquote><p>语法: IntersectionObserver.unobserve(targetElement);</p></blockquote><h4 id="配置项"><a class="header-anchor" href="#配置项" aria-hidden="true">#</a> 配置项</h4><ul><li>targetElement: 目标 DOM</li><li>root: 指定根目录，也就是当目标元素显示在这个元素中时会触发监控回调</li><li>rootMargin: 类似于css的margin，设定root元素的边框区域。</li><li>threshold: 阙值.决定了什么时候触发回调函数</li></ul><h4 id="返回参数-2"><a class="header-anchor" href="#返回参数-2" aria-hidden="true">#</a> 返回参数</h4><ul><li>time: 可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li><li>rootBounds: 是在根元素矩形区域的信息</li><li>intersectionRatio: 目标元素的可见比例</li><li>intersectionRect: 目标元素与根元素交叉区域的信息</li><li>isIntersecting: 判断元素是否符合options中的可见条件</li><li>boundingClientRect: 目标元素的矩形区域的信息</li><li>target: 被观察的目标元素</li></ul><blockquote><p>可以参考阮一峰老师的教程：<a href="https://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html" target="_blank" rel="noopener noreferrer">https://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html</a></p></blockquote><h3 id="performanceobserver"><a class="header-anchor" href="#performanceobserver" aria-hidden="true">#</a> PerformanceObserver</h3><blockquote><p>PerformanceObserver: 用于监测性能度量事件，在浏览器的性能时间轴记录下一个新的 performance entries 的时候将会被通知。</p></blockquote><h4 id="语法-3"><a class="header-anchor" href="#语法-3" aria-hidden="true">#</a> 语法</h4><p>const observer = new PerformanceObserver(callback);</p><h4 id="demo-案例-3"><a class="header-anchor" href="#demo-案例-3" aria-hidden="true">#</a> demo 案例</h4><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clicked()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Measure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\n\nvar observer2 = new PerformanceObserver((list)=&gt;{\n  console.log(list.getEntries(), &#39;PerformanceObserver&#39;)\n});\nobserver2.observe({entryTypes: [&quot;measure&quot;]});\nfunction clicked() {\n    performance.measure(&#39;点击事件&#39;);\n}\n\n</code></pre></div><h4 id="方法-3"><a class="header-anchor" href="#方法-3" aria-hidden="true">#</a> 方法</h4><ul><li>disconnect: 阻止性能观察者接收任何 PerformanceEntry 事件。</li></ul><blockquote><p>语法: performanceObserver.disconnect();</p></blockquote><ul><li>observe: 用于观察传入的参数中指定的 PerformanceEntry 类型的集合</li></ul><blockquote><p>语法: observer.observe(options);</p></blockquote><ul><li>takeRecords: 返回当前存储在性能观察器中的 PerformanceEntry 列表，将其清空。</li></ul><blockquote><p>语法: var PerformanceEntry[] = performanceObserver.takeRecords();</p></blockquote><ul><li>getEntries: 返回一个列表，该列表包含一些用于承载各种性能数据的对象,</li></ul><h4 id="配置项-2"><a class="header-anchor" href="#配置项-2" aria-hidden="true">#</a> 配置项</h4><ul><li>entryTypes: 声明需要观察哪几类性能数据 (mark（时间点）、measure（时间段）、resource（资源加载耗时)</li><li>buffered: 声明回调函数是立即同步执行还是异步执行</li></ul><h3 id="resizeobserver"><a class="header-anchor" href="#resizeobserver" aria-hidden="true">#</a> ResizeObserver</h3><blockquote><p>ResizeObserver: 接口可以监听到 DOM 的变化（节点的出现和隐藏，节点大小的变化）</p></blockquote><h4 id="语法-4"><a class="header-anchor" href="#语法-4" aria-hidden="true">#</a> 语法</h4><p>var ResizeObserver = new ResizeObserver(callback)</p><h4 id="demo-案例-4"><a class="header-anchor" href="#demo-案例-4" aria-hidden="true">#</a> demo 案例</h4><div class="language-html"><pre><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ResizeObserver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>ResizeObserver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n\nconst MtovDom = document.querySelector(&#39;.ResizeObserver&#39;)\nconst myObserver = new ResizeObserver(entries =&gt; {\n    console.log(entries, &#39;ResizeObserver&#39;)\n  })\n  myObserver.observe(MtovDom)\n\n\n</code></pre></div><h4 id="方法-4"><a class="header-anchor" href="#方法-4" aria-hidden="true">#</a> 方法</h4><ul><li>observe： 初始化观察一个指定元素。</li></ul><blockquote><p>语法：resizeObserver.observe(target);</p></blockquote><ul><li>disconnect： 取消观察某个observer的所有observed目标元素</li></ul><blockquote><p>语法：resizeObserver.disconnect();</p></blockquote><h4 id="配置项-3"><a class="header-anchor" href="#配置项-3" aria-hidden="true">#</a> 配置项</h4><ul><li>options：指定观察设置的可选参数对象</li><li>target: 被观察的 DOM 元素</li></ul><h3 id="reportingobserver"><a class="header-anchor" href="#reportingobserver" aria-hidden="true">#</a> ReportingObserver</h3><blockquote><p>ReportingObserver: 监听过时的 api、浏览器的一些干预行为的报告</p></blockquote><h4 id="语法-5"><a class="header-anchor" href="#语法-5" aria-hidden="true">#</a> 语法</h4><p>vat observe = new ReportingObserver(callback[, options]);</p><h4 id="demo-案例-5"><a class="header-anchor" href="#demo-案例-5" aria-hidden="true">#</a> demo 案例</h4><blockquote><p>** 这是网上找到的 demo 案例效果没有实现**</p></blockquote><div class="language-js"><pre><code><span class="token comment">// deprecation  和 intervention 不好模拟就不模拟了，intervention 可以查看 https://chromestatus.com/features#intervention </span>\n<span class="token keyword">const</span> reportingObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReportingObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reports<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> report <span class="token keyword">of</span> reports<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>report<span class="token punctuation">.</span>body<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>types<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;intervention&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;deprecation&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nreportingObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n</code></pre></div><h4 id="方法-5"><a class="header-anchor" href="#方法-5" aria-hidden="true">#</a> 方法</h4><ul><li>observe: 指示一个报告观察者开始在其报告队列中收集报告。</li><li>takeRecords: 返回观察者的报告队列中包含的当前报告列表,并清空队列。</li><li>disconnect: 停止之前已经开始观测的报告观测员收集报告。</li></ul><h4 id="配置项-4"><a class="header-anchor" href="#配置项-4" aria-hidden="true">#</a> 配置项</h4><ul><li>types：一个字符串数组，代表该观察者要收集的报告类型。可用的类型包括 deprecation，intervention 和 crash。</li><li>buffered: 一个布尔值，它定义在可以创建观察者之前生成的报告是否应该可观察</li></ul><h2 id="实现前端监控的思路"><a class="header-anchor" href="#实现前端监控的思路" aria-hidden="true">#</a> 实现前端监控的思路</h2><ol><li>将页面我们要监控的数据（数据）收集起来，</li><li>将数据通过接口提交给后台，并上传到数据平台</li><li>在大数据平台中进行大数据处理数据分析。</li></ol>',80);t.render=function(a,s,t,r,l,i){return n(),e("div",null,[o])};export default t;export{s as __pageData};
