import{g as e,f as n,G as s}from"./common-bec3f312.js";const t='{"title":"CSS文件划分及功能分类","frontmatter":{"date":"2022-04-15","title":"CSS文件划分及功能分类","tags":["CSS"],"describe":null},"headers":[{"level":2,"title":"CSS方法论及样式规范","slug":"css方法论及样式规范"},{"level":3,"title":"一、CSS方法论","slug":"一、css方法论"},{"level":3,"title":"二、样式规范","slug":"二、样式规范"}],"relativePath":"docs/layout/css_method.md","lastUpdated":1660147426756.5005}';var a={};const o=s('<h2 id="css方法论及样式规范"><a class="header-anchor" href="#css方法论及样式规范" aria-hidden="true">#</a> CSS方法论及样式规范</h2><h3 id="一、css方法论"><a class="header-anchor" href="#一、css方法论" aria-hidden="true">#</a> 一、CSS方法论</h3><p>方法论是一个哲学术语，会对一系列具体的方法进行分析研究、系统总结并最终提出较为一般性的原则。CSS方法论是一种面向CSS、由个人和组织设计、已被诸多项目检验且公认有效的最佳实践。这些方法论都会涉及结构化的命名约定，并且在组织CSS时可提供相应的指南，从而提升代码的性能、可读性以及可维护性。(引自：<a href="https://www.kancloud.cn/pwstrick/fe-questions/1627447" target="_blank" rel="noopener noreferrer">前端躬行记</a>)</p><p>常见的CSS方法论有：</p><ul><li><strong>OOCSS</strong></li><li><strong>BEM</strong></li><li><strong>SMACSS</strong></li><li><strong>Atomic CSS</strong></li></ul><p>我们的实战项目主要采用 BEM + SMACSS 这两种方法论的结合命名约定，所以下面对这两种方法论进行简单介绍。</p><p>BEM（Block Element Modifier）是指块级元素修饰符，BEM分为三部分：</p><ol><li>块（Block）是一个独立实体，最高级抽象，例如菜单、文本框等。</li><li>元素（Element）是块的组成部分，被包含在块中，无法自成一体，例如菜单项、标题等。</li><li>修饰符（Modifier）是块或元素的状态，可更改它们的外观或行为，例如高亮、选中等。</li></ol><p>BEM中的块、元素和修饰符需要全部小写，名称中的单词用连字符（-）分隔，元素由双下划线（__）分隔，修饰符由双连字符（–）分隔。注意，块和元素都既不能是HTML元素名或ID，也不依赖其它块或元素。</p><div class="language-css"><pre><code><span class="token selector">.setting-menu</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.setting-menu--open</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.setting-menu__head</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.setting-menu__head--fixed</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.setting-menu__content</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><p>上面代码中，<code>.setting-menu</code>表示一个独立实体，<code>.setting-menu__head</code>、<code>.setting-menu__content{}</code>表示独立实体的组成部分，<code>.setting-menu--open{}</code>是对配置菜单展开状态的一种行为描述，<code>.setting-menu__head--fixed{}</code>是对配置菜单头部固定状态的一种行为描述。</p><p>SMACSS（Scalable and Modular Architecture for CSS）是指可伸缩及模块化的CSS架构，由Jonathan Snook在2011年雅虎工作时提出。他在OOCSS和BEM的基础上添加了五种类别的组件的处理规则，具体如下所列。</p><ol><li>基础（Base）是为HTML元素定义默认样式，可以包含属性、伪类等选择器。</li><li>布局（Layout）会将页面分为几部分，可作为高级容器包含一个或多个模块，例如左右分栏、栅格系统等。</li><li>模块（Module）又名对象或块，是可重用的模块化部分，例如导航栏、产品列表等。</li><li>状态（State）描述的是任一模块或布局在特定状态下的外观，例如隐藏、激活等。</li><li>主题（Theme）也就是换肤，描述了页面的外观，它可修改前面四个类别的样式，例如链接颜色、布局方式等。</li></ol><p>通过相应的命名前缀来完成对类别的表示，<code>l-</code>用作布局的前缀，例如.l-inline、.layout-grid等；<code>m-</code>模块命名前缀，例如.m-profile、.field等；<code>is-</code>用作状态的前缀，例如.is-collapsed、.is-active等；<code>theme-</code>用作主题的前缀，例如.theme-a-background、.theme-l-grid等。</p><p>在实际工作中，不需要局限于某一个CSS方法论，很多时候可以结合使用，共享模块化CSS的规则。例如遵循BEM的命名约定，以及SMACSS的分类前缀，具体如下所列。</p><div class="language-css"><pre><code><span class="token selector">.m-setting-menu</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.m-setting-menu--open</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.m-setting-menu__head</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.m-setting-menu__head--fixed</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token selector">.m-setting-menu__content</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><p>任何软件设计都存在不完美的地方，CSS方法论也是一样。比如：命名过长不易维护；HTML不够简洁等。但是它带来的巨大优势也是非常明显的，比如：样式不容易冲突，尤其是复杂的样式结构；清晰的CSS架构，对大型CSS项目管理维护非常重要等。</p><h3 id="二、样式规范"><a class="header-anchor" href="#二、样式规范" aria-hidden="true">#</a> 二、样式规范</h3><ol><li>使用类选择器，放弃ID选择器：ID在一个页面中的唯一性导致了如果以ID为选择器来写CSS，就无法重用。</li><li>命名应简约而不失语义：反对过长命名和没有语义的命名，如：<code>.m-navigation</code>、<code>.m-abc</code>，推荐<code>.m-nav</code>。</li><li>相同语义的不同类命名：直接加数字或字母区分即可（如：<code>.m-list</code>、<code>.m-list2</code>、<code>.m-list3</code>等，都是列表模块，但是是完全不一样的模块）。</li><li>防止污染和被污染：为了防止后代选择器污染，尽量采用 <code>&gt;</code> 方式，例如：<code>-m-nav&gt;li</code>，而不是<code>-m-nav li</code>。</li><li>最后一个值也以分号结尾：通常在大括号结束前的值可以省略分号，但是这样做会对修改、添加和维护工作带来不必要的失误和麻烦。</li><li>省略值为0时的单位：为节省不必要的字节同时也使阅读方便，我们将0px、0em、0%等值缩写为0。</li><li>根据属性的重要性按顺序书写：先显示定位布局类属性，后盒模型等自身属性，最后是文本类及修饰类属性。例如：<code>.m-box{position:relative;width:600px;margin:0 auto 10px;text-align:center;color:#000;}</code>。</li><li>CSS需要进行格式化和对齐处理：推荐vsCode插件：<code>formate: CSS/LESS/SCSS formatter</code>。</li></ol>',19);a.render=function(s,t,a,c,l,i){return n(),e("div",null,[o])};export default a;export{t as __pageData};
