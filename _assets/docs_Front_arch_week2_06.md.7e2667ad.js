import{g as n,f as s,G as a}from"./common-bec3f312.js";const t='{"title":"lerna源码分析","frontmatter":{"date":"2022-04-04","title":"lerna源码分析","tags":["前端架构师","week2","脚手架"],"describe":null},"headers":[{"level":2,"title":"为什么要做源码分析？","slug":"为什么要做源码分析？"},{"level":2,"title":"为什么要分析 Lerna 源码？","slug":"为什么要分析-lerna-源码？"},{"level":2,"title":"学习目标","slug":"学习目标"},{"level":2,"title":"学习收获","slug":"学习收获"},{"level":2,"title":"准备源码","slug":"准备源码"},{"level":2,"title":"源码结构","slug":"源码结构"},{"level":3,"title":"入口","slug":"入口"},{"level":3,"title":"命令注册","slug":"命令注册"},{"level":3,"title":"package","slug":"package"},{"level":2,"title":"源码精读","slug":"源码精读"},{"level":3,"title":"import-local 源码精读","slug":"import-local-源码精读"},{"level":3,"title":"path 用法总结","slug":"path-用法总结"},{"level":3,"title":"node 的 module 模块","slug":"node-的-module-模块"},{"level":2,"title":"源码分析收获","slug":"源码分析收获"},{"level":3,"title":"本地依赖","slug":"本地依赖"},{"level":3,"title":"javascript 事件循环","slug":"javascript-事件循环"},{"level":3,"title":"从 Lerna 中学到的优秀开源库","slug":"从-lerna-中学到的优秀开源库"},{"level":2,"title":"VSCode 代码调试技巧","slug":"vscode-代码调试技巧"}],"relativePath":"docs/Front_arch/week2/06.md","lastUpdated":1660147426752.5005}';var p={};const o=a('<blockquote><p>源码仓库：<a href="https://github.com/lerna/lerna" target="_blank" rel="noopener noreferrer">https://github.com/lerna/lerna</a></p></blockquote><h2 id="为什么要做源码分析？"><a class="header-anchor" href="#为什么要做源码分析？" aria-hidden="true">#</a> 为什么要做源码分析？</h2><ul><li>自我成长、提升编码能力和技术深度的需要</li><li>为我所用、应用到实际开发，实际产生效益</li><li>学习借鉴、站在巨人肩膀上，登高望远</li></ul><blockquote><p>当然， 总体目标只有一条：赚回学费、走上“人生巅峰”</p></blockquote><h2 id="为什么要分析-lerna-源码？"><a class="header-anchor" href="#为什么要分析-lerna-源码？" aria-hidden="true">#</a> 为什么要分析 Lerna 源码？</h2><ul><li>2w+ Star 的明星项目</li><li>Lerna 是脚手架，对我们开发脚手架有借鉴价值</li><li>Lerna 项目中蕴含大量的最佳实践，值得深入研究和学习</li></ul><h2 id="学习目标"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><ul><li>Lerna 源码结构和执行流程分析</li><li><code>import-local</code> 源码深度精读</li></ul><h2 id="学习收获"><a class="header-anchor" href="#学习收获" aria-hidden="true">#</a> 学习收获</h2><ul><li>如何将源码分析的收获写进简历</li><li>学习明星项目的架构设计</li><li>获得脚手架执行流程的一种实现思路</li><li>脚手架调试本地源码的另外一种方法</li><li>Node.js加载node_modules模块的流程（全网罕见资源）</li><li>各种文件操作算法和最佳实践</li></ul><blockquote><p>学习建议：需要具备一定的 Node 基础，并做好迎接困难和挑战的准备</p></blockquote><h2 id="准备源码"><a class="header-anchor" href="#准备源码" aria-hidden="true">#</a> 准备源码</h2><p>源码阅读前准备工作：</p><ul><li>下载源码</li><li>安装依赖</li><li>IDE 打开</li></ul><p>源码阅读准备完成的标准（划重点）：</p><ul><li>找到入口文件</li><li>能够本地调试</li></ul><h2 id="源码结构"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><h3 id="入口"><a class="header-anchor" href="#入口" aria-hidden="true">#</a> 入口</h3><p>入口文件：</p><div class="language-bash"><pre><code><span class="token string">&quot;bin&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&quot;lerna&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;core/lerna/cli.js&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>入口代码：</p><div class="language-js"><pre><code><span class="token keyword">const</span> importLocal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;import-local&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">importLocal</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;npmlog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;cli&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;using local version of lerna&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="命令注册"><a class="header-anchor" href="#命令注册" aria-hidden="true">#</a> 命令注册</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>\n    lernaVersion<span class="token operator">:</span> pkg<span class="token punctuation">.</span>version<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>addCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>bootstrapCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>changedCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>cleanCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>createCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>diffCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>execCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>importCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>infoCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>initCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>linkCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>listCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>publishCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>runCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>versionCmd<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="package"><a class="header-anchor" href="#package" aria-hidden="true">#</a> package</h3><p>关于 package 的配置位于 <code>lerna.json</code></p><div class="language-json"><pre><code><span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token string">&quot;commands/*&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;core/*&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;utils/*&quot;</span>\n<span class="token punctuation">]</span>\n</code></pre></div><h2 id="源码精读"><a class="header-anchor" href="#源码精读" aria-hidden="true">#</a> 源码精读</h2><h3 id="import-local-源码精读"><a class="header-anchor" href="#import-local-源码精读" aria-hidden="true">#</a> import-local 源码精读</h3><blockquote><p><code>import-local</code> 的用途是如果处于 <code>lerna</code> 代码根目录下，执行全局 <code>lerna</code> 命令时，会优先执行当前目录下的 <code>lerna</code> 代码</p></blockquote><p>调用部分源码：</p><div class="language-js"><pre><code><span class="token function">importLocal</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span>\n</code></pre></div><p><code>import-local</code> 源码：</p><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> resolveCwd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;resolve-cwd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pkgDir <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;pkg-dir&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">filename</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> globalDir <span class="token operator">=</span> pkgDir<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> relativePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>globalDir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>globalDir<span class="token punctuation">,</span> <span class="token string">&#39;package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> localFile <span class="token operator">=</span> resolveCwd<span class="token punctuation">.</span><span class="token function">silent</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>name<span class="token punctuation">,</span> relativePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// Use `path.relative()` to detect local package installation,</span>\n\t<span class="token comment">// because __filename&#39;s case is inconsistent on Windows</span>\n\t<span class="token comment">// Can use `===` when targeting Node.js 8</span>\n\t<span class="token comment">// See https://github.com/nodejs/node/issues/6624</span>\n\t<span class="token keyword">return</span> localFile <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>localFile<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span> <span class="token operator">?</span> <span class="token function">require</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>处理流程：</p><ul><li>执行 <code>lerna</code> 全局命令，此时相当于执行：</li></ul><div class="language-"><pre><code>node /Users/sam/.nvm/versions/node/v12.11.1/lib/node_modules/lerna/cli.js\n</code></pre></div><ul><li><p>此时</p><div class="language-"><pre><code>import-local\n</code></pre></div><p>各变量计算结果为：</p><ul><li><code>globalDir</code> = <code>/Users/sam/.nvm/versions/node/v12.11.1/lib/node_modules/lerna/</code></li><li><code>relativePath</code> = <code>cli.js</code></li><li><code>pkg</code> = <code>/Users/sam/.nvm/versions/node/v12.11.1/lib/node_modules/lerna/package.json</code> 的值</li><li><code>localFile</code> = <code>/Users/sam/Desktop/arch/lerna/lerna-main/core/lerna/cli.js</code></li></ul></li></ul><p>所以最终会执行：</p><div class="language-js"><pre><code><span class="token function">require</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span>\n</code></pre></div><p>此时会开始执行 <code>/Users/sam/Desktop/arch/lerna/lerna-main/core/lerna/cli.js</code> 中的 <code>import-local</code> 逻辑</p><ul><li><p>此时</p><div class="language-"><pre><code>import-local\n</code></pre></div><p>各变量计算结果为：</p><ul><li><code>globalDir</code> = <code>/Users/sam/Desktop/arch/lerna/lerna-main/core/lerna</code></li><li><code>relativePath</code> = <code>cli.js</code></li><li><code>pkg</code> = <code>/Users/sam/Desktop/arch/lerna/lerna-main/core/lerna/package.json</code> 的值</li><li><code>localFile</code> = <code>/Users/sam/Desktop/arch/lerna/lerna-main/core/lerna/cli.js</code></li></ul></li></ul><p>此时会执行：</p><div class="language-js"><pre><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>至此 <code>import-local</code> 逻辑执行完毕</p><h3 id="path-用法总结"><a class="header-anchor" href="#path-用法总结" aria-hidden="true">#</a> path 用法总结</h3><ul><li><code>path.resolve</code></li><li><code>path.join</code></li><li><code>path.dirname</code></li><li><code>path.parse</code></li><li><code>path.isAbsolute</code></li></ul><h3 id="node-的-module-模块"><a class="header-anchor" href="#node-的-module-模块" aria-hidden="true">#</a> node 的 module 模块</h3><ul><li><code>Module._resolveFilename</code></li><li><code>Module._nodeModulePaths</code></li></ul><p>执行逻辑图： <img src="https://oss.filway.cn/filway-blog/5fda213d08fd12a415391600.jpg" alt="图片描述"></p><h2 id="源码分析收获"><a class="header-anchor" href="#源码分析收获" aria-hidden="true">#</a> 源码分析收获</h2><h3 id="本地依赖"><a class="header-anchor" href="#本地依赖" aria-hidden="true">#</a> 本地依赖</h3><p><code>package.json</code> 中引用本地依赖：</p><div class="language-json"><pre><code><span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;lerna&quot;</span><span class="token operator">:</span> <span class="token string">&quot;file:core/lerna&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>官方文档：<a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json#local-paths" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/cli/v6/configuring-npm/package-json#local-paths</a></p></blockquote><p><code>lerna publish</code> 发布时会将 <code>file:</code> 进行替换</p><div class="language-js"><pre><code><span class="token function">resolveLocalDependencyLinks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// resolve relative file: links to their actual version range</span>\n    <span class="token keyword">const</span> updatesWithLocalLinks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updates<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span>\n      Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>localDependencies<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">resolved</span> <span class="token operator">=&gt;</span> resolved<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;directory&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">return</span> <span class="token function">pMap</span><span class="token punctuation">(</span>updatesWithLocalLinks<span class="token punctuation">,</span> <span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>depName<span class="token punctuation">,</span> resolved<span class="token punctuation">]</span> <span class="token keyword">of</span> node<span class="token punctuation">.</span>localDependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// regardless of where the version comes from, we can&#39;t publish &quot;file:../sibling-pkg&quot; specs</span>\n        <span class="token keyword">const</span> depVersion <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updatesVersions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>depName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>packageGraph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>depName<span class="token punctuation">)</span><span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>version<span class="token punctuation">;</span>\n    \n        <span class="token comment">// it no longer matters if we mutate the shared Package instance</span>\n        node<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span><span class="token function">updateLocalDependency</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> depVersion<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>savePrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    \n      <span class="token comment">// writing changes to disk handled in serializeChanges()</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="javascript-事件循环"><a class="header-anchor" href="#javascript-事件循环" aria-hidden="true">#</a> javascript 事件循环</h3><p>课程中案例：</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> chain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword">let</span> chain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> chain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>强化练习，请试着解答下面这段代码中的执行逻辑：</p><div class="language-js"><pre><code><span class="token keyword">let</span> chain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nchain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain1 timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain2&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain3&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chain6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do something async&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="从-lerna-中学到的优秀开源库"><a class="header-anchor" href="#从-lerna-中学到的优秀开源库" aria-hidden="true">#</a> 从 Lerna 中学到的优秀开源库</h3><ul><li>import-local</li><li>resolve-cwd</li><li>resolve-from</li><li>module(node内置)</li><li>pkg-dir</li><li>find-up</li><li>locate-path</li><li>path-exists</li></ul><blockquote><p>推荐大家继续学习node require的实现原理，参考：<a href="http://www.ruanyifeng.com/blog/2015/05/require.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2015/05/require.html</a></p></blockquote><h2 id="vscode-代码调试技巧"><a class="header-anchor" href="#vscode-代码调试技巧" aria-hidden="true">#</a> VSCode 代码调试技巧</h2><p>参考：[<a href="https://www.yuque.com/docs/share/faa9343a-42c7-4493-b2a7-aafd8e369005?#" target="_blank" rel="noopener noreferrer">https://www.yuque.com/docs/share/faa9343a-42c7-4493-b2a7-aafd8e369005?#</a> 《VSCode调试技巧》](<a href="https://www.yuque.com/docs/share/faa9343a-42c7-4493-b2a7-aafd8e369005?#" target="_blank" rel="noopener noreferrer">https://www.yuque.com/docs/share/faa9343a-42c7-4493-b2a7-aafd8e369005?#</a> 《VSCode调试技巧》)</p>',67);p.render=function(a,t,p,e,c,l){return s(),n("div",null,[o])};export default p;export{t as __pageData};
