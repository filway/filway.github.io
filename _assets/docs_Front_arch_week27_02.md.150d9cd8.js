import{g as n,f as a,G as s}from"./common-bec3f312.js";const e='{"title":"性能监控","frontmatter":{"date":"2022-05-15","title":"性能监控","tags":["前端架构师","week27","前端监控"],"describe":null},"headers":[{"level":2,"title":"FP（First Paint）","slug":"fp（first-paint）"},{"level":2,"title":"FCP（First contentful paint）","slug":"fcp（first-contentful-paint）"},{"level":2,"title":"LCP（LargestContentfulPaint）","slug":"lcp（largestcontentfulpaint）"},{"level":2,"title":"FMP（First Meaningful Paint）","slug":"fmp（first-meaningful-paint）"},{"level":2,"title":"DCL（DOMContentLoaded）","slug":"dcl（domcontentloaded）"},{"level":2,"title":"L（load）","slug":"l（load）"},{"level":2,"title":"PerformanceTiming","slug":"performancetiming"},{"level":2,"title":"获取fp、fcp、fmp（PerformancePaintTiming）","slug":"获取fp、fcp、fmp（performancepainttiming）"},{"level":2,"title":"获取更多性能指标：PerformanceObserver","slug":"获取更多性能指标：performanceobserver"}],"relativePath":"docs/Front_arch/week27/02.md","lastUpdated":1660147426752.5005}';var t={};const o=s('<h1 id="前端性能监控平台架构"><a class="header-anchor" href="#前端性能监控平台架构" aria-hidden="true">#</a> 前端性能监控平台架构</h1><p><img src="https://oss.filway.cn/filway-blog/6279c7df090bb97615000748.jpg" alt="图片描述"></p><h1 id="前端性能监控原理"><a class="header-anchor" href="#前端性能监控原理" aria-hidden="true">#</a> 前端性能监控原理</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigation_timing_API" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Navigation_timing_API</a><img src="https://oss.filway.cn/filway-blog/6279c7fb0902e9d014580870-20220515003445109.jpg" alt="图片描述"><img src="https://oss.filway.cn/filway-blog/6279c82709f42f9f15000807.jpg" alt="图片描述"> Chrome Performance插件 <img src="https://oss.filway.cn/filway-blog/6279c83909fef4a515000554.jpg" alt="图片描述"></p><h2 id="fp（first-paint）"><a class="header-anchor" href="#fp（first-paint）" aria-hidden="true">#</a> FP（First Paint）</h2><p>First Paint, part of the <a href="https://developer.mozilla.org/en-US/docs/Web/PerformancePaintTiming" target="_blank" rel="noopener noreferrer">Paint Timing API</a>, is the time between navigation and when the browser renders the first pixels to the screen, rendering anything that is visually different from what was on the screen prior to navigation. It answers the question &quot;Is it happening?&quot; <a href="https://developer.mozilla.org/en-US/docs/Glossary/First_paint" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/First_paint</a></p><h2 id="fcp（first-contentful-paint）"><a class="header-anchor" href="#fcp（first-contentful-paint）" aria-hidden="true">#</a> FCP（First contentful paint）</h2><p>First Contentful Paint (FCP) is when the browser renders the first bit of content from the DOM, providing the first feedback to the user that the page is actually loading. The question “Is it happening?” is “yes” when the first contentful paint completes. <a href="https://developer.mozilla.org/en-US/docs/Glossary/First_contentful_paint" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/First_contentful_paint</a></p><h2 id="lcp（largestcontentfulpaint）"><a class="header-anchor" href="#lcp（largestcontentfulpaint）" aria-hidden="true">#</a> LCP（LargestContentfulPaint）</h2><p>The LargestContentfulPaint interface of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Largest_Contentful_Paint_API" target="_blank" rel="noopener noreferrer">Largest Contentful Paint API</a> provides details about the largest image or text paint before user input on a web page. The timing of this paint is a good heuristic for when the main page content is available during load. <a href="https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint</a></p><h2 id="fmp（first-meaningful-paint）"><a class="header-anchor" href="#fmp（first-meaningful-paint）" aria-hidden="true">#</a> FMP（First Meaningful Paint）</h2><p>First Meaningful Paint (FMP) is the paint after which the biggest above-the-fold layout change has happened and web fonts have loaded. It is when the answer to “Is it useful?” becomes “yes”, upon first meaningful paint completion. <a href="https://developer.mozilla.org/en-US/docs/Glossary/first_meaningful_paint" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/first_meaningful_paint</a></p><h2 id="dcl（domcontentloaded）"><a class="header-anchor" href="#dcl（domcontentloaded）" aria-hidden="true">#</a> DCL（DOMContentLoaded）</h2><p>The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event</a></p><h2 id="l（load）"><a class="header-anchor" href="#l（load）" aria-hidden="true">#</a> L（load）</h2><p>The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. This is in contrast to DOMContentLoaded, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event</a></p><blockquote><p>前端名词解释：<a href="https://github.com/mdn/content/tree/main/files/en-us/glossary" target="_blank" rel="noopener noreferrer">https://github.com/mdn/content/tree/main/files/en-us/glossary</a></p></blockquote><p><img src="https://oss.filway.cn/filway-blog/6279c85709e567f815000538.jpg" alt="图片描述"></p><h1 id="前端性能采集"><a class="header-anchor" href="#前端性能采集" aria-hidden="true">#</a> 前端性能采集</h1><h2 id="performancetiming"><a class="header-anchor" href="#performancetiming" aria-hidden="true">#</a> PerformanceTiming</h2><div class="language-javascript"><pre><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// PerformanceTiming 毫秒</span>\n  <span class="token keyword">const</span> timing <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> processingTiming <span class="token operator">=</span> timing<span class="token punctuation">.</span>domComplete <span class="token operator">-</span> timing<span class="token punctuation">.</span>domLoading<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> dnsTiming <span class="token operator">=</span> timing<span class="token punctuation">.</span>domainLookupStart <span class="token operator">-</span> timing<span class="token punctuation">.</span>domainLookupEnd<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>processingTiming<span class="token punctuation">,</span> dnsTiming<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// PerformanceNavigationTiming 纳秒</span>\n  <span class="token keyword">const</span> perfEntries <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>perfEntries<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="获取fp、fcp、fmp（performancepainttiming）"><a class="header-anchor" href="#获取fp、fcp、fmp（performancepainttiming）" aria-hidden="true">#</a> 获取fp、fcp、fmp（PerformancePaintTiming）</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming</a></p><div class="language-javascript"><pre><code><span class="token comment">// fp</span>\n<span class="token keyword">const</span> paint <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&#39;paint&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fp <span class="token operator">=</span> paint<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;first-paint&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startTime<span class="token punctuation">;</span>\n<span class="token keyword">const</span> fcp <span class="token operator">=</span> paint<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;first-contentful-paint&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startTime<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fcp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="获取更多性能指标：performanceobserver"><a class="header-anchor" href="#获取更多性能指标：performanceobserver" aria-hidden="true">#</a> 获取更多性能指标：PerformanceObserver</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver</a></p><div class="language-javascript"><pre><code><span class="token comment">// PerformanceObserver</span>\n<span class="token keyword">function</span> <span class="token function">observer_callback</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span>observer_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\nobserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> entryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;paint&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;resource&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mark&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&#39;own&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',27);t.render=function(s,e,t,p,r,i){return a(),n("div",null,[o])};export default t;export{e as __pageData};
