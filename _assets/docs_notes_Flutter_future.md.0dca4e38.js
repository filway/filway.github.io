import{g as n,f as s,G as a}from"./common-bec3f312.js";const t='{"title":"Future与FutureBuilder实用技巧","frontmatter":{"date":"2022-04-13","title":"Future与FutureBuilder实用技巧","tags":["Flutter"],"describe":null},"headers":[{"level":2,"title":"异步：Future与FutureBuilder实用技巧","slug":"异步：future与futurebuilder实用技巧"},{"level":2,"title":"什么是Future？","slug":"什么是future？"},{"level":2,"title":"Future的常见用法？","slug":"future的常见用法？"},{"level":3,"title":"使用future.then获取future的值与捕获future的异常","slug":"使用future-then获取future的值与捕获future的异常"},{"level":3,"title":"结合async await","slug":"结合async-await"},{"level":3,"title":"future.whenComplete","slug":"future-whencomplete"},{"level":3,"title":"future.timeout","slug":"future-timeout"},{"level":2,"title":"什么是FutureBuilder？","slug":"什么是futurebuilder？"},{"level":3,"title":"FutureBuilder的构造方法","slug":"futurebuilder的构造方法"},{"level":2,"title":"FutureBuilder的使用？","slug":"futurebuilder的使用？"}],"relativePath":"docs/notes/Flutter/future.md","lastUpdated":1660147426756.5005}';var p={};const e=a('<h2 id="异步：future与futurebuilder实用技巧"><a class="header-anchor" href="#异步：future与futurebuilder实用技巧" aria-hidden="true">#</a> 异步：Future与FutureBuilder实用技巧</h2><ul><li>什么是Future？</li><li>Future的常见用法？ <ul><li>获取Future的结果？</li><li>捕获Future的异常？</li><li>结合async，await？</li><li>future.whenComplete？</li><li>future.timeout？</li></ul></li><li>什么是FutureBuilder？</li><li>FutureBuilder常见的用法？</li></ul><h2 id="什么是future？"><a class="header-anchor" href="#什么是future？" aria-hidden="true">#</a> 什么是Future？</h2><p><code>Future</code>表示在接下来的某个时间的值或错误，借助<code>Future</code>我们可以在Flutter实现异步操作。</p><blockquote><p>它类似于ES6中的Promise，提供<code>then</code>和<code>catchError</code>的链式调用；</p></blockquote><p><code>Future</code>是<code>dart:async</code>包中的一个类，使用它时需要导入<code>dart:async</code>包，<code>Future</code>有两种状态：</p><ul><li>pending - 执行中；</li><li>completed - 执行结束，分两种情况要么成功要么失败；</li></ul><h2 id="future的常见用法？"><a class="header-anchor" href="#future的常见用法？" aria-hidden="true">#</a> Future的常见用法？</h2><ul><li>使用<code>future.then</code>获取future的值与捕获future的异常</li><li>结合<code>async</code>,<code>await</code></li><li><code>future.whenComplete</code></li><li><code>future.timeout</code></li></ul><h3 id="使用future-then获取future的值与捕获future的异常"><a class="header-anchor" href="#使用future-then获取future的值与捕获future的异常" aria-hidden="true">#</a> 使用<code>future.then</code>获取future的值与捕获future的异常</h3><div class="language-"><pre><code>import &#39;dart:async&#39;;\n\nFuture&lt;String&gt; testFuture() {\n//   throw new Error();\n  return Future.value(&#39;success&#39;);\n//   return Future.error(&#39;error&#39;);\n}\n\nmain() {\n  testFuture().then((s) {\n    print(s);\n  }, onError: (e) {\n    print(&#39;onError:&#39;);\n    print(e);\n  }).catchError((e) {\n    print(&#39;catchError:&#39;);\n    print(e);\n  });\n}\n</code></pre></div><blockquote><p>如果<code>catchError</code>与<code>onError</code>同时存在，则会只调用<code>onError</code>；</p></blockquote><p><strong>Future的then的原型：</strong></p><div class="language-dart"><pre><code>Future<span class="token operator">&lt;</span>R<span class="token operator">&gt;</span> then<span class="token operator">&lt;</span>R<span class="token operator">&gt;</span><span class="token punctuation">(</span>FutureOr<span class="token operator">&lt;</span>R<span class="token operator">&gt;</span> <span class="token function">onValue</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">Function</span> onError<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>第一个参数会成功的结果回调，第二个参数<code>onError</code>可选表示执行出现异常。</p><p><a href="https://dartpad.dartlang.org/a1c357685c8141d6b28587dfee315839" target="_blank" rel="noopener noreferrer">练一练</a></p><h3 id="结合async-await"><a class="header-anchor" href="#结合async-await" aria-hidden="true">#</a> 结合<code>async</code> <code>await</code></h3><p><code>Future</code>是异步的，如果我们要将异步转同步，那么可以借助<code>async</code> <code>await</code>来完成。</p><div class="language-"><pre><code>import &#39;dart:async&#39;;\n\ntest() async {\n  int result = await Future.delayed(Duration(milliseconds: 2000), () {\n    return Future.value(123);\n  });\n  print(&#39;t3:&#39; + DateTime.now().toString());\n  print(result);\n}\n\nmain() {\n  print(&#39;t1:&#39; + DateTime.now().toString());\n  test();\n  print(&#39;t2:&#39; + DateTime.now().toString());\n}\n</code></pre></div><p><a href="https://dartpad.dartlang.org/50166d54277401e3ad324dd4d9fa8d6a" target="_blank" rel="noopener noreferrer">练一练</a></p><h3 id="future-whencomplete"><a class="header-anchor" href="#future-whencomplete" aria-hidden="true">#</a> future.whenComplete</h3><p>有时候我们需要在<code>Future</code>结束的时候做些事情，我们知道<code>then().catchError()</code>的模式类似于<code>try-catch</code>，<code>try-catch</code>有个<code>finally</code>代码块，而<code>future.whenComplete</code>就是<code>Future</code>的finally。</p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;dart:async&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;dart:math&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> random <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Future<span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextBool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token string">&#39;boom!&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;done!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="future-timeout"><a class="header-anchor" href="#future-timeout" aria-hidden="true">#</a> future.timeout</h3><p>完成一个异步操作可能需要很长的时间，比如：网络请求，但有时我们需要为异步操作设置一个超时时间，那么，如何为<code>Future</code>设置超时时间呢？</p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;dart:async&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">Future<span class="token punctuation">.</span>delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>运行上述代码会看到：<code>TimeoutException after 0:00:02.000000: Future not completed</code>。</p><p><a href="https://dartpad.dartlang.org/c545f19c614e75ae10ed044328720661" target="_blank" rel="noopener noreferrer">练一练</a></p><h2 id="什么是futurebuilder？"><a class="header-anchor" href="#什么是futurebuilder？" aria-hidden="true">#</a> 什么是FutureBuilder？</h2><p><code>FutureBuilder</code>是一个将异步操作和异步UI更新结合在一起的类，通过它我们可以将网络请求，数据库读取等的结果更新的页面上。</p><h3 id="futurebuilder的构造方法"><a class="header-anchor" href="#futurebuilder的构造方法" aria-hidden="true">#</a> FutureBuilder的构造方法</h3><div class="language-"><pre><code>FutureBuilder({Key key, Future&lt;T&gt; future, T initialData, @required AsyncWidgetBuilder&lt;T&gt; builder })\n</code></pre></div><ul><li><code>future</code>： Future对象表示此构建器当前连接的异步计算；</li><li><code>initialData</code>： 表示一个非空的Future完成前的初始化数据；</li><li><code>builder</code>： AsyncWidgetBuilder类型的回到函数，是一个基于异步交互构建widget的函数；</li></ul><p>这个<code>builder</code>函数接受两个参数<code>BuildContext context</code> 与 <code>AsyncSnapshot&lt;T&gt; snapshot</code>，它返回一个widget。<code>AsyncSnapshot</code>包含异步计算的信息，它具有以下属性：</p><p><code>connectionState</code> - 枚举ConnectionState的值，表示与异步计算的连接状态，ConnectionState有四个值：none，waiting，active和done； <code>data</code> - 异步计算接收的最新数据； <code>error</code> - 异步计算接收的最新错误对象；</p><p>AsyncSnapshot还具有<code>hasData</code>和<code>hasError</code>属性，以分别检查它是否包含非空数据值或错误值。</p><p>现在我们可以看到使用<code>FutureBuilder</code>的基本模式。 在创建新的FutureBuilder对象时，我们将Future对象作为要处理的异步计算传递。 在构建器函数中，我们检查connectionState的值，并使用AsyncSnapshot中的数据或错误返回不同的窗口小部件。</p><p><a href="https://flutter-academy.com/async-in-flutter-futurebuilder/" target="_blank" rel="noopener noreferrer">https://flutter-academy.com/async-in-flutter-futurebuilder/</a></p><h2 id="futurebuilder的使用？"><a class="header-anchor" href="#futurebuilder的使用？" aria-hidden="true">#</a> FutureBuilder的使用？</h2><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;dart:convert&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token string">&#39;package:flutter/material.dart&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;package:http/http.dart&#39;</span> <span class="token operator">as</span> http<span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata symbol">@override</span>\n  State<span class="token operator">&lt;</span>StatefulWidget<span class="token operator">&gt;</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_MyAppState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">_MyAppState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>MyApp<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  String showResult <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n  Future<span class="token operator">&lt;</span>CommonModel<span class="token operator">&gt;</span> <span class="token function">fetchPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http\n        <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.devio.org/io/flutter_app/json/test_common_model.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Utf8Decoder utf8decoder <span class="token operator">=</span> <span class="token function">Utf8Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//fix 中文乱码</span>\n    <span class="token keyword">var</span> result <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>utf8decoder<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>bodyBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> CommonModel<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata symbol">@override</span>\n  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>\n      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>\n        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>\n          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Future与FutureBuilder实用技巧&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        body<span class="token punctuation">:</span> FutureBuilder<span class="token operator">&lt;</span>CommonModel<span class="token operator">&gt;</span><span class="token punctuation">(</span>\n            future<span class="token punctuation">:</span> <span class="token function">fetchPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            builder<span class="token punctuation">:</span>\n                <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> AsyncSnapshot<span class="token operator">&lt;</span>CommonModel<span class="token operator">&gt;</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">switch</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>connectionState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">case</span> ConnectionState<span class="token punctuation">.</span>none<span class="token punctuation">:</span>\n                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Input a URL to start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> ConnectionState<span class="token punctuation">.</span>waiting<span class="token punctuation">:</span>\n                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> ConnectionState<span class="token punctuation">.</span>active<span class="token punctuation">:</span>\n                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> ConnectionState<span class="token punctuation">.</span>done<span class="token punctuation">:</span>\n                  <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n                      <span class="token string">&#39;${snapshot.error}&#39;</span><span class="token punctuation">,</span>\n                      style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">&gt;</span><span class="token punctuation">[</span>\n                      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;icon:${snapshot.data.icon}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;statusBarColor:${snapshot.data.statusBarColor}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;title:${snapshot.data.title}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;url:${snapshot.data.url}&#39;</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                  <span class="token punctuation">}</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">CommonModel</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span> String icon<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String title<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String url<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> String statusBarColor<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> bool hideAppBar<span class="token punctuation">;</span>\n\n  <span class="token function">CommonModel</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>icon<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>statusBarColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hideAppBar<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">factory</span> CommonModel<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">CommonModel</span><span class="token punctuation">(</span>\n      icon<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;icon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      title<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      url<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      statusBarColor<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;statusBarColor&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      hideAppBar<span class="token punctuation">:</span> json<span class="token punctuation">[</span><span class="token string">&#39;hideAppBar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><a href="https://flutter-academy.com/async-in-flutter-futurebuilder/" target="_blank" rel="noopener noreferrer">https://flutter-academy.com/async-in-flutter-futurebuilder/</a></li></ul>',41);p.render=function(a,t,p,o,c,u){return s(),n("div",null,[e])};export default p;export{t as __pageData};
