import{g as n,f as a,G as s}from"./common-bec3f312.js";const t='{"title":"Node 最佳实践","frontmatter":{"date":"2022-04-29","title":"Node 最佳实践","tags":["前端架构师","week29","脚手架"],"describe":null},"headers":[{"level":2,"title":"项目结构最佳实践","slug":"项目结构最佳实践"},{"level":3,"title":"拆分模块","slug":"拆分模块"},{"level":3,"title":"分层设计","slug":"分层设计"},{"level":3,"title":"封装公共模块成为NPM的包","slug":"封装公共模块成为npm的包"},{"level":3,"title":"配置文件","slug":"配置文件"},{"level":2,"title":"异常处理最佳实践","slug":"异常处理最佳实践"},{"level":3,"title":"使用 async await 或 promise，避免使用回调","slug":"使用-async-await-或-promise，避免使用回调"},{"level":2,"title":"编码风格实践","slug":"编码风格实践"},{"level":2,"title":"测试和总体的质量实践","slug":"测试和总体的质量实践"},{"level":2,"title":"上线实践","slug":"上线实践"},{"level":2,"title":"安全最佳实践","slug":"安全最佳实践"}],"relativePath":"docs/Front_arch/week29/03.md","lastUpdated":1660147426756.5005}';var p={};const e=s('<h1 id=""><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><blockquote><p>全文地址：<a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md" target="_blank" rel="noopener noreferrer">https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md</a></p></blockquote><h2 id="项目结构最佳实践"><a class="header-anchor" href="#项目结构最佳实践" aria-hidden="true">#</a> 项目结构最佳实践</h2><h3 id="拆分模块"><a class="header-anchor" href="#拆分模块" aria-hidden="true">#</a> 拆分模块</h3><p>拆分原则：</p><ul><li>业务拆分</li><li>技术拆分</li></ul><h3 id="分层设计"><a class="header-anchor" href="#分层设计" aria-hidden="true">#</a> 分层设计</h3><p>将业务分层处理，以 GitFlow 为例：</p><ul><li>Publish</li><li>Git</li><li>GitServer</li><li>CloudBuild</li></ul><h3 id="封装公共模块成为npm的包"><a class="header-anchor" href="#封装公共模块成为npm的包" aria-hidden="true">#</a> 封装公共模块成为NPM的包</h3><ul><li>参考 Lerna 源码设计</li><li>通过 file 或 npm link 关联本地模块</li><li>控制拆分力度，设计拆分原则</li></ul><h3 id="配置文件"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><ul><li>将配置文件独立处置</li><li>巧用环境变量共享配置</li><li>将密码文件独立于源码提交</li><li>通过 <a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="noopener noreferrer">dotenv</a> 或 <a href="https://www.npmjs.com/package/config" target="_blank" rel="noopener noreferrer">config</a> 管理环境变量或配置文件</li></ul><h2 id="异常处理最佳实践"><a class="header-anchor" href="#异常处理最佳实践" aria-hidden="true">#</a> 异常处理最佳实践</h2><h3 id="使用-async-await-或-promise，避免使用回调"><a class="header-anchor" href="#使用-async-await-或-promise，避免使用回调" aria-hidden="true">#</a> 使用 async await 或 promise，避免使用回调</h3><p><strong>推荐：</strong></p><div class="language-js"><pre><code><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doWork<span class="token punctuation">)</span>\n <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doOtherWork<span class="token punctuation">)</span>\n <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> doWork<span class="token punctuation">)</span>\n <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> error<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>verify<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>或者</p><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doOtherWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> <span class="token function">doWork</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>不推荐：</strong></p><div class="language-js"><pre><code><span class="token function">getData</span><span class="token punctuation">(</span>someParameter<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n      <span class="token comment">//做一些事情类似于调用给定的回调函数并传递错误</span>\n      <span class="token function">getMoreData</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n          <span class="token comment">//做一些事情类似于调用给定的回调函数并传递错误</span>\n          <span class="token function">getMoreData</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n            <span class="token function">getMoreData</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n              <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                <span class="token comment">//你有什么想法? </span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="编码风格实践"><a class="header-anchor" href="#编码风格实践" aria-hidden="true">#</a> 编码风格实践</h2><ul><li>使用ESLint</li><li>Node.js特定的插件</li><li>在同一行开始一个代码块的大括号</li><li>不要忘记分号</li><li>命名您的方法</li><li>变量、常量、函数和类的命名约定</li><li>使用const优于let，废弃var</li><li>先require, 而不是在方法内部</li><li>require 文件夹，而不是文件</li><li>使用 === 操作符</li><li>使用 Async Await, 避免回调</li><li>使用 (=&gt;) 箭头函数</li></ul><h2 id="测试和总体的质量实践"><a class="header-anchor" href="#测试和总体的质量实践" aria-hidden="true">#</a> 测试和总体的质量实践</h2><ul><li>至少，编写API（组件）测试</li><li>使用一个linter检测代码问题</li><li>经常检查易受攻击的依赖</li><li>检查过期的依赖包</li></ul><h2 id="上线实践"><a class="header-anchor" href="#上线实践" aria-hidden="true">#</a> 上线实践</h2><ul><li>监控!</li><li>使用智能日志增加透明度</li><li>委托可能的一切（例如：gzip，SSL）给反向代理</li><li>锁住依赖</li><li>利用CPU多核</li><li>Node外管理您的前端资源</li><li>设置NODE_ENV=production</li></ul><h2 id="安全最佳实践"><a class="header-anchor" href="#安全最佳实践" aria-hidden="true">#</a> 安全最佳实践</h2><ul><li>拥护linter安全准则</li><li>使用中间件限制并发请求</li><li>把机密信息从配置文件中抽离出来，或者使用包对其加密</li><li>通用安全最佳实践集合</li><li>调整 HTTP 响应头以加强安全性</li><li>经常自动检查易受攻击的依赖库</li><li>避免使用Node.js的crypto库处理密码，使用Bcrypt</li><li>转义 HTML、JS 和 CSS 输出</li><li>验证传入的JSON schemas</li><li>使用非root用户运行Node.js</li><li>避免JavaScript的eval声明</li><li>在沙箱中运行不安全代码</li><li>使用子进程时要格外小心</li><li>避免不安全的重定向</li><li>避免将机密信息发布到NPM仓库</li></ul>',29);p.render=function(s,t,p,o,l,c){return a(),n("div",null,[e])};export default p;export{t as __pageData};
