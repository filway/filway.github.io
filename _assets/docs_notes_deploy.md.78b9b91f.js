import{g as n,f as s,G as a}from"./common-bec3f312.js";const t='{"title":"自动部署","frontmatter":{"date":"2021-10-10","title":"自动部署","tags":["发布上线","自动部署"],"describe":"前端发布上线相关"},"headers":[{"level":2,"title":"前端发布上线相关","slug":"前端发布上线相关"},{"level":3,"title":"release-it","slug":"release-it"},{"level":3,"title":"pm2相关","slug":"pm2相关"},{"level":3,"title":"github action","slug":"github-action"}],"relativePath":"docs/notes/deploy.md","lastUpdated":1660147426760.5005}';var p={};const o=a('<h2 id="前端发布上线相关"><a class="header-anchor" href="#前端发布上线相关" aria-hidden="true">#</a> 前端发布上线相关</h2><h3 id="release-it"><a class="header-anchor" href="#release-it" aria-hidden="true">#</a> release-it</h3><ol><li>配置文件.release-it.js</li></ol><div class="language-javascript"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    git<span class="token operator">:</span> <span class="token punctuation">{</span>\n        tagName<span class="token operator">:</span> <span class="token string">&#39;v${version}&#39;</span><span class="token punctuation">,</span>\n        commitMessage<span class="token operator">:</span> <span class="token string">&#39;release: v${version}&#39;</span><span class="token punctuation">,</span>\n        requireCleanWorkingDir<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        requireBranch<span class="token operator">:</span> <span class="token string">&#39;master&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    hooks<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;before:init&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;git pull origin master&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    npm<span class="token operator">:</span> <span class="token punctuation">{</span>\n        publish<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    prompt<span class="token operator">:</span> <span class="token punctuation">{</span>\n        ghRelease<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        glRelease<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        publish<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;@release-it/conventional-changelog&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            preset<span class="token operator">:</span> <span class="token string">&#39;angular&#39;</span><span class="token punctuation">,</span>\n            infile<span class="token operator">:</span> <span class="token string">&#39;CHANGELOG.md&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li>npm脚本</li></ol><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;prd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production NODE_LOG_DIR=/tmp/admin-server ENABLE_NODE_LOG=YES  pm2 start bin/pm2-prd.config.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;release&quot;</span><span class="token operator">:</span> <span class="token string">&quot;release-it&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;just-try-release&quot;</span><span class="token operator">:</span> <span class="token string">&quot;release-it --dry-run&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="pm2相关"><a class="header-anchor" href="#pm2相关" aria-hidden="true">#</a> pm2相关</h3><ol><li>配置</li></ol><ul><li>pm2AppConf.js</li></ul><div class="language-javascript"><pre><code><span class="token comment">/**\n* @description pm2 app 配置信息\n*/</span>\n\n<span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> cpuCoreLength <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment">// CPU 几核</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;项目名称&#39;</span><span class="token punctuation">,</span>\n  script<span class="token operator">:</span> <span class="token string">&#39;bin/www&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// watch: true,</span>\n  ignore_watch<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__test__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logs&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  instances<span class="token operator">:</span> cpuCoreLength<span class="token punctuation">,</span>\n  error_file<span class="token operator">:</span> <span class="token string">&#39;./logs/err.log&#39;</span><span class="token punctuation">,</span>\n  out_file<span class="token operator">:</span> <span class="token string">&#39;./logs/out.log&#39;</span><span class="token punctuation">,</span>\n  log_date_format<span class="token operator">:</span> <span class="token string">&#39;YYYY-MM-DD HH:mm:ss Z&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Z 表示使用当前时区的时间格式</span>\n  combine_logs<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 多个实例，合并日志</span>\n  max_memory_restart<span class="token operator">:</span> <span class="token string">&#39;300M&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 内存占用超过 300M ，则重启</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>pm2-prd.config.js</li></ul><div class="language-javascript"><pre><code><span class="token comment">/**\n* @description pm2 配置文件，线上环境\n* @author 双越\n*/</span>\n\n<span class="token keyword">const</span> appConf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./pm2AppConf&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  apps<span class="token operator">:</span> <span class="token punctuation">[</span>appConf<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>www脚本</li></ul><div class="language-javascript"><pre><code>#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node\n\n<span class="token comment">/**\n* Module dependencies.\n*/</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../src/app&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;demo:server&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> syncDb <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../src/db/seq/utils/sync-alter&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">/**\n* Get port from environment and store in Express.\n*/</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token function">normalizePort</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token string">&#39;3000&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// app.set(&#39;port&#39;, port);</span>\n\n<span class="token comment">/**\n* Create HTTP server.\n*/</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">/**\n* Listen on provided port, on all network interfaces.\n*/</span>\n\n<span class="token comment">// 先同步 mysql 数据表</span>\n<span class="token function">syncDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 再启动服务</span>\n  server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>\n  server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> onError<span class="token punctuation">)</span>\n  server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;listening&#39;</span><span class="token punctuation">,</span> onListening<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">/**\n* Normalize a port into a number, string, or false.\n*/</span>\n\n<span class="token keyword">function</span> <span class="token function">normalizePort</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// named pipe</span>\n      <span class="token keyword">return</span> val\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// port number</span>\n      <span class="token keyword">return</span> port\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n* Event listener for HTTP server &quot;error&quot; event.\n*/</span>\n\n<span class="token keyword">function</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>syscall <span class="token operator">!==</span> <span class="token string">&#39;listen&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> error\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> bind <span class="token operator">=</span> <span class="token keyword">typeof</span> port <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Pipe </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n\n  <span class="token comment">// handle specific listen errors with friendly messages</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;EACCES&#39;</span><span class="token operator">:</span>\n          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bind<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> requires elevated privileges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n          process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token keyword">break</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;EADDRINUSE&#39;</span><span class="token operator">:</span>\n          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bind<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is already in use</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n          process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token keyword">break</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n          <span class="token keyword">throw</span> error\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n* Event listener for HTTP server &quot;listening&quot; event.\n*/</span>\n\n<span class="token keyword">function</span> <span class="token function">onListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> bind <span class="token operator">=</span> <span class="token keyword">typeof</span> addr <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pipe </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>addr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>addr<span class="token punctuation">.</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bind<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h3 id="github-action"><a class="header-anchor" href="#github-action" aria-hidden="true">#</a> github action</h3><ul><li>deploy-prd.yml</li></ul><div class="language-yaml"><pre><code><span class="token comment"># This workflow will run tests using node and then publish a package to GitHub Packages when a release is created</span>\n<span class="token comment"># For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages</span>\n<span class="token comment"># github actions 中文文档 https://docs.github.com/cn/actions/getting-started-with-github-actions</span>\n\n<span class="token key atrule">name</span><span class="token punctuation">:</span> deploy production\n\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n      <span class="token key atrule">tags</span><span class="token punctuation">:</span>\n          <span class="token punctuation">-</span> <span class="token string">&#39;v*.*.*&#39;</span>\n\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n\n      <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n          <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js\n            <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1\n            <span class="token key atrule">with</span><span class="token punctuation">:</span>\n                <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">12</span> <span class="token comment"># 尽量和线上机 node 版本保持一直</span>\n          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lint and test <span class="token comment"># 测试</span>\n            <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n                npm i\n                npm run lint\n                npm run test:remote</span>\n          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> set ssh key <span class="token comment"># 临时设置 ssh key</span>\n            <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n                mkdir -p ~/.ssh/\n                echo &quot;${{secrets.ZX_ID_RSA}}&quot; &gt; ~/.ssh/id_rsa # secret 在这里配置 https://github.com/filway/settings/secrets\n                chmod 600 ~/.ssh/id_rsa\n                ssh-keyscan &quot;${{secrets.IPTOC}}&quot; &gt;&gt; ~/.ssh/known_hosts</span>\n          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> deploy <span class="token comment"># 部署</span>\n            <span class="token key atrule">run</span><span class="token punctuation">:</span> ssh work@$<span class="token punctuation">{</span><span class="token punctuation">{</span>secrets.IPTOC<span class="token punctuation">}</span><span class="token punctuation">}</span> &quot;bash <span class="token punctuation">-</span>s&quot; &lt; bin/deploy.sh $<span class="token punctuation">{</span><span class="token punctuation">{</span>secrets.TOKEN<span class="token punctuation">}</span><span class="token punctuation">}</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>github.ref<span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> delete ssh key <span class="token comment"># 删除 ssh key</span>\n            <span class="token key atrule">run</span><span class="token punctuation">:</span> rm <span class="token punctuation">-</span>rf ~/.ssh/id_rsa\n\n</code></pre></div><ul><li>deploy脚本</li></ul><div class="language-shell"><pre><code><span class="token shebang important">#!/bin/bash</span>\n\n<span class="token comment"># 执行时需传入两个参数：参数1 - github 密码，参数2 - tag ，如 `sh bin/deploy.sh v1.0.1 xxx`</span>\n<span class="token comment"># shell 代码中使用 $1 $2 即可依次获取参数</span>\n\n<span class="token assign-left variable">teamPath</span><span class="token operator">=</span><span class="token string">&quot;/home/work/xxx-team&quot;</span> <span class="token comment"># team 目录</span>\n<span class="token assign-left variable">repoPath</span><span class="token operator">=</span><span class="token string">&quot;/home/work/xxx-team/repo&quot;</span> <span class="token comment"># 项目目录，要和 repo 同名！！！</span>\n<span class="token assign-left variable">repoGitUrl</span><span class="token operator">=</span><span class="token string">&quot;https://<span class="token variable">$1</span>@github.com/username/repo.git&quot;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">&quot;<span class="token variable">$teamPath</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n  <span class="token comment"># 如果 team 目录不存在，则创建</span>\n  <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token function">mkdir</span> <span class="token string">&quot;<span class="token variable">$teamPath</span>&quot;</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\n  <span class="token function">mkdir</span> <span class="token string">&quot;<span class="token variable">$teamPath</span>&quot;</span>\n<span class="token keyword">fi</span>\n<span class="token builtin class-name">cd</span> <span class="token string">&quot;<span class="token variable">$teamPath</span>&quot;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">&quot;<span class="token variable">$repoPath</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n  <span class="token comment">## 如果 repo 目录不存在，则 git clone （私有项目，需要 github 用户名和密码）</span>\n  <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token function">git</span> clone start <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\n  <span class="token function">git</span> clone <span class="token string">&quot;<span class="token variable">$repoGitUrl</span>&quot;</span>\n  <span class="token function">git</span> remote remove origin<span class="token punctuation">;</span> <span class="token comment"># 删除 origin ，否则会暴露 github 密码</span>\n  <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token function">git</span> clone end <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\n<span class="token keyword">fi</span><span class="token punctuation">;</span>\n<span class="token builtin class-name">cd</span> <span class="token string">&quot;<span class="token variable">$repoPath</span>&quot;</span>\n\n<span class="token function">git</span> checkout <span class="token builtin class-name">.</span> <span class="token comment"># 撤销一切文件改动，否则可能导致 pull 失败</span>\n\n<span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token string">&quot;<span class="token variable">$repoGitUrl</span>&quot;</span>\n<span class="token function">git</span> pull origin master <span class="token comment"># 下载最新 master 代码，tag 都是基于 master 分支提交的</span>\n<span class="token function">git</span> fetch --tags <span class="token comment"># 获取所有 tags 。否则，光执行 git pull origin master 获取不到新提交的 tag</span>\n<span class="token function">git</span> remote remove origin<span class="token punctuation">;</span> <span class="token comment"># 删除 origin ，否则会暴露 github 密码</span>\n\n<span class="token comment"># 切换到 tag ，重要！！！</span>\n<span class="token function">git</span> checkout <span class="token string">&quot;<span class="token variable">$2</span>&quot;</span>\n<span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token function">git</span> checkout <span class="token string">&quot;<span class="token variable">$2</span>&quot;</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\n\n<span class="token comment"># 安装依赖</span>\n<span class="token function">npm</span> <span class="token function">install</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org\n\n<span class="token comment">## 运行/重启 服务</span>\n<span class="token function">npm</span> run prd\n\n<span class="token comment">## 心跳检测</span>\n<span class="token function">npm</span> run heart-beat-check\n\n<span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> deploy success <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\n\n</code></pre></div>',19);p.render=function(a,t,p,e,c,l){return s(),n("div",null,[o])};export default p;export{t as __pageData};
